<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>dovydas.xyz Blog</title><link href="https://dovydas.xyz/blog/" rel="alternate"></link><link href="https://dovydas.xyz/feed.xml" rel="self"></link><id>urn:uuid:f67be767-38b6-347d-988b-f706675c1a45</id><updated>2023-03-12T00:00:00Z</updated><author><name></name></author><entry><title>Dovydas.xyz is back up and running!</title><link href="https://dovydas.xyz/blog/dovydasxyz-is-back-up-and-running/" rel="alternate"></link><updated>2023-03-12T00:00:00Z</updated><author><name>DG.</name></author><id>urn:uuid:ff052dab-d7b7-3620-8782-9351f9c9fc12</id><content type="html">&lt;p&gt;After four whole months I managed to find the time to get my page back-up.
I moved to a different city and the internet provider here does not allow self hosting, because all clients are behind a NAT on a service provider level.&lt;/p&gt;
&lt;p&gt;So I decided to fallback to the old way of hosting my static website - GitHub pages.&lt;/p&gt;
&lt;p&gt;This time I tried out few new things GitHub actions.
Which is actually was a very pleasant experience from development perspective.
The CI builds are fast and the GitHub actions configuration is quite similar to Ansible's.&lt;/p&gt;
&lt;p&gt;Additionally I changed where I keep my blog's source code, I moved into a private repository,  and with the help of GitHub actions I deploy the compiled static webpage using &lt;code&gt;ghpages&lt;/code&gt; protocol (via SSH). So &lt;a href="https://github.com/dovydasgulbinas/dovydasgulbinas.github.io"&gt;dovydasgulbinas.github.io&lt;/a&gt; only contains build files, that are then served to you, the reader.
Now every time I do a commit to my new private blog repository and push-it to GitHub it will automatically build this website, run some tests currently (htmltest) and deploy it.&lt;/p&gt;
&lt;p&gt;The takeaway is that GitHub actions rock for deployments.
I plan on adding &lt;a href="https://playwright.dev/"&gt;Playwright&lt;/a&gt; based e2e tests for my static pages (mostly for learning purposes).&lt;/p&gt;
</content></entry><entry><title>Truncate Text In Lektor</title><link href="https://dovydas.xyz/blog/concatenate-page-text-in-lektor/" rel="alternate"></link><updated>2022-05-08T00:00:00Z</updated><author><name>D.G.</name></author><id>urn:uuid:9d9f18d1-e436-3ccf-9dd5-5e199813e202</id><content type="html">&lt;p&gt;In this example, variable &lt;code&gt;post&lt;/code&gt; is an instance of &lt;code&gt;Markdown&lt;/code&gt;.
Snippet was tested with Jinja3 template engine.
I use it for generating my blog entry previews.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ post.body.html | striptags | truncate(length=200, killwords=False, end='...') }}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;post.body.html&lt;/code&gt;: is the Lektor object containing regular string or HTML text.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;striptags&lt;/code&gt;:  Removes all HTML markup and returns pure text. &lt;a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.striptags"&gt;docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;truncate(length=200, killwords=False, end='...')&lt;/code&gt;: truncate text  to 200 symbols, stop at the nearest word that fits this length, and add "..." in the end of the truncated string. &lt;a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.truncate"&gt;docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Installing Selenium  For Google Chrome (Windows 10)</title><link href="https://dovydas.xyz/blog/installing-selenium-for-google-chrome-windows-10/" rel="alternate"></link><updated>2022-05-06T00:00:00Z</updated><author><name>D.G.</name></author><id>urn:uuid:5fae06a3-401a-35ba-96ad-1ebb5112516a</id><content type="html">&lt;p&gt;This tutorial will show you how to install Selenium for Google Chrome (Windows 10), and optionally Python related dependencies.&lt;/p&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Chrome Installed on your Windows machine&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="guide-outline"&gt;Guide Outline&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href="#install-the-webdriver"&gt;Install the WebDriver&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href="#check-your-google-chrome-version"&gt;Check Your Google Chrome Version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#download-the-chromedriver"&gt;Download the ChromeDriver&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-set-up"&gt;Python Set-Up&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href="#open-powershell"&gt;Open PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#verify-python-selenium-installation"&gt;Verify Python Selenium Installation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="install-the-webdriver"&gt;Install the WebDriver&lt;/h2&gt;&lt;p&gt;WebDriver (ChromeDriver for Chrome) gives Selenium access to control your web-browser.&lt;/p&gt;
&lt;h3 id="check-your-google-chrome-version"&gt;Check Your Google Chrome Version&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Find Chrome version (remember it for later):&lt;/p&gt;
&lt;p&gt;… → Help → About Chrome&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="86695802ec4222cce52a2319f0fb2a24.png" alt="86695802ec4222cce52a2319f0fb2a24.png"&gt;&lt;/p&gt;
&lt;h3 id="download-the-chromedriver"&gt;Download the ChromeDriver&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/chromium.org/driver/downloads?authuser=0"&gt;Download&lt;/a&gt; the Chromedriver Binary (which matches your Chrome version):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="53f7c7b857b049a324b8984bf693fb2c.png" alt="webdriver binary"&gt;
&lt;img src="71d44a724d08599bea5601874676b201.png" alt="dl page"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Extract the &lt;code&gt;chromedriver_win32.zip&lt;/code&gt; anywhere.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the absolute path to &lt;code&gt;chromedriver.exe&lt;/code&gt; (remember it for later, it is needed for Python and other scripts).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="090980263de30a2bd06535c027f20acf.png" alt="090980263de30a2bd06535c027f20acf.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can now delete the &lt;code&gt;chromedriver_win32.zip&lt;/code&gt; it will not be needed anymore.
Your WebDriver installation is complete.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python-set-up"&gt;Python Set-up&lt;/h2&gt;&lt;p&gt;prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 3 - installed&lt;/li&gt;
&lt;li&gt;pip -  Python package manager installed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will finish the set-up required for running Python based Selenium scripts.&lt;/p&gt;
&lt;h3 id="open-powershell"&gt;Open PowerShell&lt;/h3&gt;&lt;p&gt;Hold shift + mouse2; then click "&lt;em&gt;Open PowerShell window here&lt;/em&gt;"
&lt;img src="a9807464049fa81f21f312754c62e6d7.png" alt="a9807464049fa81f21f312754c62e6d7.png"&gt;&lt;/p&gt;
&lt;h3 id="install-python-selenium-package"&gt;Install Python Selenium Package&lt;/h3&gt;&lt;p&gt;In the PowerShell, enter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install selenium
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="verify-python-selenium-installation"&gt;Verify Python Selenium Installation&lt;/h3&gt;&lt;p&gt;In the PowerShell, enter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Python REPL, enter:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If no errors occurred during &lt;code&gt;pip install selenium&lt;/code&gt;, and &lt;code&gt;import selenium&lt;/code&gt; you are done with your Python set-up.&lt;/p&gt;
&lt;div class="admonition admonition-note"&gt;&lt;p&gt;Remember absolute path to the &lt;code&gt;chromedriver.exe&lt;/code&gt; in your Python scripts.&lt;/p&gt;&lt;/div&gt;</content></entry><entry><title>Upgrade LinuxServer/Nextcloud Container Manually</title><link href="https://dovydas.xyz/blog/upgrade-linuxservernextcloud-container-manually/" rel="alternate"></link><updated>2022-04-26T00:00:00Z</updated><author><name></name></author><id>urn:uuid:b3e2ab1e-ce39-3c9e-9813-0a1f29099777</id><content type="html">&lt;p&gt;This guide will show you how to manually upgrade &lt;code&gt;linuxserver/nextcloud&lt;/code&gt; Docker container.&lt;/p&gt;
&lt;p&gt;Normally, Nextcloud upgrades are done by pressing and &lt;em&gt;Update&lt;/em&gt; button in the settings page, but for me, it did not work.
Because, I was running my Nextcloud 16 with a path prefix e.g. &lt;code&gt;example.com/nextcloud&lt;/code&gt;.
Automatic updates do not work with path prefixes (they only work with domains or subdomains).&lt;/p&gt;
&lt;p&gt;Each heading will guide you through steps needed to upgrade from one major version to the next major version.
Plan ahead, because Nextcloud downtime is expected.&lt;/p&gt;
&lt;h2 id="general-prerequisites"&gt;General Prerequisites&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;This guide assumes you are using &lt;code&gt;docker-compose.yml&lt;/code&gt; files for managing your Nextcloud instance.&lt;ul&gt;
&lt;li&gt;If not, you will need to stop your database manually after you stop your container&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access to the host's shell (not the docker container shell).&lt;/li&gt;
&lt;li&gt;Access to the &lt;code&gt;config/&lt;/code&gt; folder as mounted on the host.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget&lt;/code&gt; installed on the host.&lt;/li&gt;
&lt;li&gt;Name (or hash) of the upgraded container (in my case &lt;code&gt;nextcloud&lt;/code&gt;).&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;docker ps -a | grep nextcloud&lt;/code&gt; to see the name and hash.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sections below &lt;em&gt;Upgrading to version X to X+1&lt;/em&gt; are almost identical.
Each major version heading, has subheadings for fixing database issues that occur after the upgrade.&lt;/p&gt;
&lt;div class="admonition admonition-warning"&gt;&lt;p&gt;Upgrade one major version at a time.
Do not do something stupid like upgrading from Nextcloud 17 to 19.
Skipping major versions, can break your Nextcloud installation permanently.&lt;/p&gt;&lt;/div&gt;&lt;h2 id="upgrading-from-version-16-to-17"&gt;Upgrading from version 16 to 17&lt;/h2&gt;&lt;p&gt;first stop current compose containers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go to Nextcloud configuration directory on host:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;your nextcloud dir&amp;gt;/www/nextcloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old configuration to old folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv nextcloud nextcloud-old-16
wget -O nextcloud-17.zip https://download.nextcloud.com/server/releases/nextcloud-17.0.10.zip
unzip nextcloud-17.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old used files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp nextcloud-old-17/config/* nextcloud/config/
cp -r nextcloud-old-17/data nextcloud/data/
cp -r nextcloud-old-17/apps/ nextcloud/apps/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continue to &lt;a href="#completing-the-upgrade"&gt;Completing the Upgrade&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="fixing-related-issues-16-to-17"&gt;Fixing related issues 16 to 17&lt;/h3&gt;&lt;p&gt;&lt;img src="143ed40ec0fe967362464c8c88ae8f03.png" alt="143ed40ec0fe967362464c8c88ae8f03.png"&gt;&lt;/p&gt;
&lt;p&gt;Attach to your container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it nextcloud bash
cd /config/www/nextcloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Convert to big int &lt;a href="https://docs.nextcloud.com/server/17/admin_manual/configuration_database/bigint_identifiers.html"&gt;source&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -u abc php occ db:convert-filecache-bigint
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Optional) After the command completes exit the container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continue to &lt;a href="#issue-verification"&gt;Issue Verification&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="upgrading-from-version-17-to-18"&gt;Upgrading from version 17 to 18&lt;/h2&gt;&lt;p&gt;first stop current compose containers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go to Nextcloud configuration directory on host:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;your nextcloud dir&amp;gt;/www/nextcloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old configuration to old folder (in my case old version was 17)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv nextcloud nextcloud-old-17
wget -O nextcloud-18.zip https://download.nextcloud.com/server/releases/nextcloud-18.0.14.zip
unzip nextcloud-18.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old used files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp nextcloud-old-17/config/* nextcloud/config/
cp -r nextcloud-old-17/data nextcloud/data/
cp -r nextcloud-old-17/apps/ nextcloud/apps/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continue to &lt;a href="#completing-the-upgrade"&gt;Completing the Upgrade&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="fixing-related-issues-17-to-18"&gt;Fixing related issues 17 to 18&lt;/h3&gt;&lt;p&gt;&lt;img src="390437bc9451ddad0fcc77a5fe255867.png" alt="390437bc9451ddad0fcc77a5fe255867.png"&gt;&lt;/p&gt;
&lt;p&gt;attach to your container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it nextcloud bash
cd /config/www/nextcloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add missing indices:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -u abc php occ db:add-missing-indices
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;convert to big int:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -u abc php occ db:convert-filecache-bigint
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continue to &lt;a href="#issue-verification"&gt;Issue Verification&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="upgrading-from-version-18-to-19"&gt;Upgrading from version 18 to 19&lt;/h2&gt;&lt;p&gt;First stop current compose containers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go to Nextcloud configuration directory (on host):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;your nextcloud dir&amp;gt;/www
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old configuration to old folder (in my case old version was 18)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv nextcloud nextcloud-old-18
wget -O nextcloud-19.zip https://download.nextcloud.com/server/releases/nextcloud-19.0.13.zip
unzip nextcloud-19.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old used files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp nextcloud-old-18/config/* nextcloud/config/
cp -r nextcloud-old-18/data nextcloud/data/
cp -r nextcloud-old-18/apps/ nextcloud/apps/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continue to &lt;a href="#completing-the-upgrade"&gt;Completing the Upgrade&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="fixing-related-issues-18-to-19"&gt;Fixing related issues 18 to 19&lt;/h3&gt;&lt;p&gt;&lt;img src="113fa9a3a78611d3838400fcc7b208ae.png" alt="113fa9a3a78611d3838400fcc7b208ae.png"&gt;&lt;/p&gt;
&lt;p&gt;attach to your container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it nextcloud bash
cd /config/www/nextcloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add missing indices:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -u abc php occ db:add-missing-indices
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add optional columns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -u abc php occ db:add-missing-columns
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continue to &lt;a href="#issue-verification"&gt;Issue Verification&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="upgrading-from-version-19-to-20"&gt;Upgrading from version 19 to 20&lt;/h2&gt;&lt;p&gt;First stop current compose containers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go to Nextcloud configuration directory (on host):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;your nextcloud config dir&amp;gt;/config/www
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old configuration to old folder (in my case old version was 18)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv nextcloud nextcloud-old-19
wget -O nextcloud-20.zip https://download.nextcloud.com/server/releases/nextcloud-20.0.11.zip
unzip nextcloud-20.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old used files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp nextcloud-old-19/config/* nextcloud/config/
cp -r nextcloud-old-19/data nextcloud/data/
cp -r nextcloud-old-19/apps/ nextcloud/apps/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continue to &lt;a href="#completing-the-upgrade"&gt;Completing the Upgrade&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="fixing-related-issues-19-to-20"&gt;Fixing related issues 19 to 20&lt;/h3&gt;&lt;p&gt;&lt;img src="ada39ebde620f04251e527ba0bfb38a1.png" alt="ada39ebde620f04251e527ba0bfb38a1.png"&gt;&lt;/p&gt;
&lt;p&gt;attach to your container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it nextcloud bash
cd /config/www/nextcloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add missing indices:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -u abc php occ db:add-missing-indices
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add missing primary keys:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -u abc php occ db:add-missing-primary-keys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;do big int conversion&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -u abc php occ db:convert-filecache-bigint
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continue to &lt;a href="#completing-the-upgrade"&gt;Completing the Upgrade&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="upgrading-from-version-20-to-21"&gt;Upgrading from version 20 to 21&lt;/h2&gt;&lt;p&gt;First stop current compose containers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go to Nextcloud configuration directory (on host):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;your nextcloud config dir&amp;gt;/config/www
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old configuration to old folder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv nextcloud nextcloud-old-20
wget -O nextcloud-21.zip https://download.nextcloud.com/server/releases/nextcloud-21.0.9.zip
unzip nextcloud-21.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old used files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp nextcloud-old-20/config/* nextcloud/config/
cp -r nextcloud-old-20/data nextcloud/data/
cp -r nextcloud-old-20/apps/ nextcloud/apps/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start the container again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continue to &lt;a href="#completing-the-upgrade"&gt;Completing the Upgrade&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="fixing-related-issues-20-to-21"&gt;Fixing related issues 20 to 21&lt;/h3&gt;&lt;p&gt;attach to your container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it nextcloud bash
cd /config/www/nextcloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add missing indices (in the container):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -u abc php occ db:add-missing-indices
exit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continue to &lt;a href="#completing-the-upgrade"&gt;Completing the Upgrade&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="upgrading-from-version-21-to-22"&gt;Upgrading from version 21 to 22&lt;/h2&gt;&lt;p&gt;First stop current compose containers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go to Nextcloud configuration directory (on host):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;your nextcloud config dir&amp;gt;/config/www
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old configuration to old folder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv nextcloud nextcloud-old-21
wget -O nextcloud-22.zip https://download.nextcloud.com/server/releases/nextcloud-22.2.9.zip
unzip nextcloud-22.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old used files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp nextcloud-old-21/config/* nextcloud/config/
cp -r nextcloud-old-21/data nextcloud/data/
cp -r nextcloud-old-21/apps/ nextcloud/apps/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start the container again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continue to &lt;a href="#completing-the-upgrade"&gt;Completing the Upgrade&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="fixing-related-issues-21-to-22"&gt;Fixing related issues 21 to 22&lt;/h3&gt;&lt;p&gt;attach to your container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it nextcloud bash
cd /config/www/nextcloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add missing indices (in the container):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -u abc php occ db:add-missing-indices
exit
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="upgrading-from-version-22-to-23"&gt;Upgrading from version 22 to 23&lt;/h2&gt;&lt;p&gt;First stop current compose containers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go to Nextcloud configuration directory (on host):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd config/www
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old configuration to old folder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv nextcloud nextcloud-old-22
wget -O nextcloud-23.zip https://download.nextcloud.com/server/releases/nextcloud-23.0.6.zip
unzip nextcloud-23.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;move old used files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp nextcloud-old-22/config/* nextcloud/config/
cp -r nextcloud-old-22/data nextcloud/data/
cp -r nextcloud-old-22/apps/ nextcloud/apps/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start the container again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continue to &lt;a href="#completing-the-upgrade"&gt;Completing the Upgrade&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="fixing-related-issues-22-to-23"&gt;Fixing related issues 22 to 23&lt;/h3&gt;&lt;p&gt;During the upgrade I noticed that Nextcloud complained about some environment variables were not set I ignored this message and my upgrade was still successful.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WARNING: The MEDIA_NEXTCLOUD_ROOT variable is not set. Defaulting to a blank string.
WARNING: The PROXY_NETWORK variable is not set. Defaulting to a blank string.
WARNING: The NETWORK_DB_GLOBAL variable is not set. Defaulting to a blank string.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;attach to your container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it nextcloud bash
cd /config/www/nextcloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add missing indices (in the container):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -u abc php occ db:add-missing-indices
exit
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="completing-the-upgrade"&gt;Completing the Upgrade&lt;/h2&gt;&lt;p&gt;This section is based on the &lt;a href="https://docs.nextcloud.com/server/latest/admin_manual/maintenance/manual_upgrade.html"&gt;official guide&lt;/a&gt; and is adapted for &lt;code&gt;linuxserver/nextcloud&lt;/code&gt; containers&lt;/p&gt;
&lt;p&gt;start compose containers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;compose file dir&amp;gt;
docker-compose up -d

docker exec -it nextcloud bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point you have two options how to upgrade your installation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Option 1 (easy), you rely on Nextcloud auto-update from the browser.&lt;/li&gt;
&lt;li&gt;Option 2 (harder), you use Nextcloud CLI inside the docker container.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="completion-option-1-easy"&gt;Completion Option 1 (easy)&lt;/h3&gt;&lt;p&gt;Go to your Nextcloud instance (example.com/nextcloud) and follow the instruction on the web in order to complete the installation (I only tested this when upgrading from versions 21 up to 23).&lt;/p&gt;
&lt;p&gt;&lt;img src="auto-upgrade.png" alt="auto-upgrade"&gt;&lt;/p&gt;
&lt;h3 id="completion-option-2-harder"&gt;Completion Option 2 (harder)&lt;/h3&gt;&lt;p&gt;Attach to your container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it nextcloud bash
cd /config/www/nextcloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change file permissions inside the container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /config/www/
chown -R abc:abc nextcloud
find nextcloud/ -type d -exec chmod 750 {} \;
find nextcloud/ -type f -exec chmod 640 {} \;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;call the actual upgrade command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /config/www/nextcloud
sudo -u abc php occ upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;after update is complete exit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;restart the containers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Continue to &lt;a href="#issue-verification"&gt;Issue Verification&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="issue-verification"&gt;Issue Verification&lt;/h3&gt;&lt;p&gt;Almost done, open your Nextcloud URL example.com/nextcloud/settings/admin/overview in the browser and verify that it is still running.&lt;/p&gt;
&lt;p&gt;Verify the Nextcloud version &lt;em&gt;Settings → Overview → Version&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If under &lt;em&gt;Settings → Overview → Security &amp;amp; Setup&lt;/em&gt; you see a message like&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;“There are some errors regarding your setup.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="07978caa14526aa2428d5f1fd5018ea7.png" alt="issue example"&gt;&lt;/p&gt;
&lt;p&gt;Continue to related guides to fix the issues (if needed)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you see no errors, you are done. Or continue upgrading to next major version.&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixing-related-issues-16-to-17"&gt;Fixing related issues 16 to 17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixing-related-issues-17-to-18"&gt;Fixing related issues 17 to 18&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixing-related-issues-18-to-19"&gt;Fixing related issues 18 to 19&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixing-related-issues-19-to-20"&gt;Fixing related issues 19 to 20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixing-related-issues-21-to-22"&gt;Fixing related issues 21 to 22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixing-related-issues-22-to-23"&gt;Fixing related issues 22 to 23&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may also want to consider upgrading your Nextcloud docker container to match the version your new Nextcloud installation, so that environment has all the dependencies needed. 
Nextcloud is quite forgiving if you do not upgrade them, but you will definitely need to do this when you reach version 23.&lt;/p&gt;
&lt;p&gt;In my case I only upgraded my Docker image when I reached version 23 and verified, that Nextcloud was running beforehand.&lt;/p&gt;
</content></entry><entry><title>Using Jython for Quick Java Protyping</title><link href="https://dovydas.xyz/blog/using-jython-for-quick-java-protyping/" rel="alternate"></link><updated>2022-04-05T00:00:00Z</updated><author><name>D.G.</name></author><id>urn:uuid:9b6f339d-bc83-3787-a3e2-bc80277cc32b</id><content type="html">&lt;p&gt;If you are tired of compiling Java classes when prototyping, or you are using poorly documented java libraries, this tutorial is for you.&lt;/p&gt;
&lt;p&gt;Java runtime can be complimented with Python/Jython scripting.
Jython allows you to call java classes and run Java code inside a Python &lt;a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop"&gt;REPL&lt;/a&gt;, or from a regular &lt;code&gt;.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Python(the programming language) is written in C, not Java.
There a multiple interpreters and implementations of Python, one of them is Jython.
Jython is a complete Python implementation and  written in Java.&lt;/p&gt;
&lt;p&gt;Jython is a two-way street, meaning you can &lt;em&gt;call Java classes inside Python&lt;/em&gt;, or &lt;em&gt;call Python code inside Java&lt;/em&gt;.
We will only focus &lt;em&gt;call Java classes inside Jython&lt;/em&gt;, since doing it the other way around is much more involved, and not as useful for quick prototyping.&lt;/p&gt;
&lt;h2 id="running-jython-for-the-first-time"&gt;Running Jython for The First Time&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;prerequisites:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="../run-jython-standalone-jar-on-windows/"&gt;JRE Installed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="jython-101.zip"&gt;Download&lt;/a&gt; &lt;code&gt;jython-101.zip&lt;/code&gt;; and extract it anywhere you like&lt;/li&gt;
&lt;li&gt;&lt;a href="https://search.maven.org/artifact/org.python/jython-standalone/2.7.2/jar"&gt;Download&lt;/a&gt; &lt;code&gt;jython-standalone.2.7.2.jar&lt;/code&gt;, place it in &lt;code&gt;jython_101/lib&lt;/code&gt; folder&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Terminal commands from this point are relative to the working directory: &lt;code&gt;jython_101/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Begin by testing if Jython runs inside JRE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -jar ./lib/jython-standalone-2.7.2.jar --help
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We called &lt;code&gt;--help&lt;/code&gt; on our Jython CLI.
Call the &lt;code&gt;hello_world.py&lt;/code&gt; script found in the stub:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -classpath ./lib/* org.python.util.jython ./hello_world.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open the &lt;code&gt;hello_world.py&lt;/code&gt; in your text editor and see that  we can have mixed runtime inside a Jython script.
For something more practical, we can print the current time using &lt;code&gt;java.util.Date&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Firstly start REPL:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -jar ./lib/jython-standalone-2.7.2.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then In the REPL shell enter this code (line by line):&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;java.util&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# Prints result in REPL&lt;/span&gt;
&lt;span class="n"&gt;Tue&lt;/span&gt; &lt;span class="n"&gt;Jan&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt; &lt;span class="n"&gt;EET&lt;/span&gt; &lt;span class="mi"&gt;2022&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We called a Java stdlib class and printed its value using Jython &lt;code&gt;print()&lt;/code&gt; method.
Exit the REPL shell by typing &lt;code&gt;exit()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We can now compare similar identical functionality, from pure Java perspective&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.util.Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JavaDateDemo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// init a Date object&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// print time and date using toString()&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As we compare Java vs Jython usage of the same &lt;code&gt;java.util.Date&lt;/code&gt; class, it is evident, that Jython code is much more concise.
Let us generalize some key differences between Java and (P-)Jython&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Java&lt;/th&gt;
&lt;th&gt;Jython&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Code must be contained in a class&lt;/td&gt;
&lt;td&gt;code can be called in any module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;required &lt;code&gt;main()&lt;/code&gt; method definition&lt;/td&gt;
&lt;td&gt;not required&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Functions and variables require type declarations&lt;/td&gt;
&lt;td&gt;uses duck typing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object initialization requires a &lt;code&gt;new&lt;/code&gt; keyword&lt;/td&gt;
&lt;td&gt;assignment using '=' is sufficient&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Compilation required for execution&lt;/td&gt;
&lt;td&gt;execution is done without compiling&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;verbose syntax&lt;/td&gt;
&lt;td&gt;clean syntax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;No REPL&lt;/td&gt;
&lt;td&gt;has REPL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="using-jython-with-your-project"&gt;Using Jython With Your Project&lt;/h2&gt;&lt;p&gt;Up until this point I have only showed you some trivial code example for using Jython.
In this section we will use a 3-rd party Java library and do &lt;a href="https://en.wikipedia.org/wiki/Turtle_graphics"&gt;Turtle Graphics&lt;/a&gt;.
The code that generates the drawings was written in Jython and calls some Java drawing primitives, from StdDraw.java library (found at &lt;code&gt;jython_101/lib/stdlib.jar&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In the extracted &lt;code&gt;jython_101.zip&lt;/code&gt; stub, there is a Jython file called &lt;code&gt;turtlej.py&lt;/code&gt;.
We will run it and see how the minimalist Jython program draws a space filling Hilbert curve, and a polygon.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;turtlej.py&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -classpath ./lib/* org.python.util.jython ./turtlej.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Command explanation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java&lt;/code&gt;: Java executable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-classpath ./lib/*&lt;/code&gt;:  parameter it simply tells your java runtime to scan all &lt;code&gt;.jar&lt;/code&gt; files inside the &lt;code&gt;lib/&lt;/code&gt; folder i.e. makes them available for import inside Jython.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.python.util.jython&lt;/code&gt;: is the reverse url notation to jython class containing a &lt;code&gt;main()&lt;/code&gt;  method(notice the class name is jython, not Jython)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./turtlej.py&lt;/code&gt;: Name of the Jython script executed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If everything went well, a new window should open, and you should see a result like shown below.&lt;/p&gt;
&lt;p&gt;&lt;img src="da8a859466ff60fb09a45739dd334d22.png" alt="order5_pshc.png"&gt;&lt;/p&gt;
&lt;p&gt;So as we see the &lt;code&gt;turtlej.py&lt;/code&gt; drew 2 different images on screen.
The first one was the 5-th order &lt;a href="https://en.wikipedia.org/wiki/Hilbert_curve"&gt;Pseudo Hilbert Curve&lt;/a&gt;, and the second was a recursively generated polygon.&lt;/p&gt;
&lt;p&gt;I suggest you to open &lt;code&gt;turtlej.py&lt;/code&gt; in the text editor and try to understand what is being done for yourself.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Although we have not done much, apart to running some Jython scripts.
I propose you to read thoroughly through the &lt;code&gt;turtlej.py&lt;/code&gt;  program.&lt;/p&gt;
&lt;p&gt;If you are feeling adventurous,  use only Java and implement &lt;code&gt;class Turtle&lt;/code&gt; and Hilbert curve drawing algorithm.
Then you will understand how slow Java development is as compared to Python.&lt;/p&gt;
</content></entry><entry><title>Run Jython Standalone Jar On Windows</title><link href="https://dovydas.xyz/blog/run-jython-standalone-jar-on-windows/" rel="alternate"></link><updated>2022-04-04T00:00:00Z</updated><author><name>D.G.</name></author><id>urn:uuid:a3fa8d8a-d9e0-323b-9f63-a96eb3131737</id><content type="html">&lt;p&gt;This tutorial will show you how you can run &lt;code&gt;jython-standalone.2.7.2.jar&lt;/code&gt; on a Windows machine.
Using Jython standalone, you will be able to execute Python scripts, or use Python &lt;a href="https://codewith.mu/en/tutorials/1.1/repl"&gt;REPL&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition admonition-note"&gt;&lt;p&gt;Pip install for Jython is not covered.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic knowlege of Windows PowerShell&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="guide-outline"&gt;Guide outline&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Install OpenJDK 17&lt;ol&gt;
&lt;li&gt;&lt;a href="#download-java"&gt;Download Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-path-java-variable"&gt;Add Path Java variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#verify-java-installation"&gt;Verify Java Installation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#download-jython-jar-and-guide-stub"&gt;Download Jython.jar and Guide Stub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run Jython Standalone&lt;ol&gt;
&lt;li&gt;&lt;a href="#verify-jython-installation"&gt;Verify Jython Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#run-jython-repl"&gt;Run Jython REPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#run-jython-script"&gt;Run Jython Script&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="install-openjdk-17"&gt;Install OpenJDK 17&lt;/h2&gt;&lt;h3 id="download-java"&gt;Download Java&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href="https://jdk.java.net/java-se-ri/17"&gt;Download&lt;/a&gt;  Windows 10 x64 JDK &lt;img src="dd0d19dd32a52a6fc782c22bbec55bd5.png" alt="jdk-screen"&gt;&lt;/li&gt;
&lt;li&gt;From zip extract,  jdk-17 folder to disk &lt;code&gt;C:\&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Absolute path to the JDK installation should be &lt;code&gt;C:\jdk-17&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="add-path-java-variable"&gt;Add Path Java variable&lt;/h3&gt;&lt;p&gt;This part assumes you have installed OpenJDK in &lt;code&gt;C:\jdk-17&lt;/code&gt; folder.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In Windows search type "Edit environment variables for your account"&lt;/li&gt;
&lt;li&gt;Double click [Path]&lt;/li&gt;
&lt;li&gt;Click [New]&lt;/li&gt;
&lt;li&gt;Enter this: &lt;code&gt;C:\jdk-17\bin&lt;/code&gt;; press Enter key&lt;/li&gt;
&lt;li&gt;Click [OK] &lt;img src="907a169d45fc00d8ab354d90f1282e6b.png" alt="env variable menu"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="verify-java-installation"&gt;Verify Java Installation&lt;/h3&gt;&lt;p&gt;In PowerShell run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assert Java version is correct:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openjdk version "17.0.1" 2021-10-19
OpenJDK Runtime Environment (build 17.0.1+12-39)
OpenJDK 64-Bit Server VM (build 17.0.1+12-39, mixed mode, sharing)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you see &lt;code&gt;OpenJDK 64-Bit Server VM&lt;/code&gt; your installation was successful.&lt;/p&gt;
&lt;h2 id="download-jython-jar-and-guide-stub"&gt;Download Jython.jar and Guide Stub&lt;/h2&gt;&lt;p&gt;This tutorial includes a zip file containing folder structure and a test script.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="jythonstub.zip"&gt;Download&lt;/a&gt; the stub and extract it on your PC.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://search.maven.org/artifact/org.python/jython-standalone/2.7.2/jar"&gt;Download&lt;/a&gt; jython-standalone.2.7.2.jar, and save it to &lt;code&gt;jythonstub/lib&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="run-jython-standalone"&gt;Run Jython Standalone&lt;/h2&gt;&lt;p&gt;PowerShell commands below are executed in folder &lt;code&gt;jythonstub/&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="verify-jython-installation"&gt;Verify Jython Installation&lt;/h3&gt;&lt;p&gt;Assert that Jython runs inside JRE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -jar ./lib/jython-standalone-2.7.2.jar --help
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;expected result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;usage: jython [option] ... [-c cmd | -m mod | file | -] [arg] ...
Options and arguments:
-B       : don't write bytecode files on import
-c cmd   : program passed in as string (terminates option list)
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="run-jython-repl"&gt;Run Jython REPL&lt;/h3&gt;&lt;p&gt;Assert that Jython REPL is working:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -jar ./lib/jython-standalone-2.7.2.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expected result:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Jython&lt;/span&gt; &lt;span class="mf"&gt;2.7.2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="mf"&gt;.7.2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;925&lt;/span&gt;&lt;span class="n"&gt;a3cc3b49d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mar&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OpenJDK&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Bit&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="n"&gt;VM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Oracle&lt;/span&gt; &lt;span class="n"&gt;Corporation&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;java17&lt;/span&gt;&lt;span class="mf"&gt;.0.1&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="run-jython-script"&gt;Run Jython Script&lt;/h3&gt;&lt;p&gt;Assert that Jython script is working, th:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -classpath ./lib/* org.python.util.jython ./hello_world.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should print:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PYTHON: Hello World!
JAVA: Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Command explanation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java&lt;/code&gt;:  Is OpenJDK, we installed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-classpath ./lib/*&lt;/code&gt;:  tells your java runtime to scan all &lt;code&gt;.jar&lt;/code&gt; files inside the &lt;code&gt;lib/&lt;/code&gt; folder, i.e. makes them available for import inside Jython.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.python.util.jython&lt;/code&gt; : reverse URL notation to jython class containing a &lt;code&gt;main()&lt;/code&gt;  method(notice the class name is jython, not Jython)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./hello_world.py&lt;/code&gt;: Name of the Jython script executed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;If you managed to run a Jython script using this guide, good news.
Now you have a clean environment to work on your Jython projects.
Do not forget to place additional jar files to the &lt;code&gt;lib/&lt;/code&gt; folder!&lt;/p&gt;
</content></entry><entry><title>Python Generator Basics</title><link href="https://dovydas.xyz/blog/intro-to-python-generators/" rel="alternate"></link><updated>2021-12-02T00:00:00Z</updated><author><name>D.G.</name></author><id>urn:uuid:c5800b08-16f7-312e-8bc1-fbb1ffb2ea99</id><content type="html">&lt;p&gt;This is a  illustrative example code, which tries to demonstrate
how generators and &lt;code&gt;yield&lt;/code&gt; statements are related in python.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;# `yield` a fancy way of pausing execution of a function.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;# Let&amp;#39;s begin with a complex example&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;smart_yield&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;


&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;# We can only access value of a generator by itterating over it.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;smart_yield&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;smart_yield item: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stupid_yield&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;# Each iteration progresses the code by consuming one `yield` at a time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;# No more yield keywords exist, let&amp;#39;s close the generator&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;stupid_yield&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stupid_yield item: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hybrid_yield&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;# Generators remember last `yield` they returned&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;# We have finished executing  hybrid_yield&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;# Notice that hybrid_yield ran 5 times (intermittently) instead of expected 4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hybrid_yield&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hybrid_yield item: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;conclusions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;# Conclusions:&lt;/span&gt;
&lt;span class="s2"&gt;    - Yield allows us to pause code execution while  being able to do something else&lt;/span&gt;
&lt;span class="s2"&gt;    - Since we paused execution we can jump back into it at any time.&lt;/span&gt;
&lt;span class="s2"&gt;    - each `yield &amp;lt;value&amp;gt;` is like a `return &amp;lt;value&amp;gt;`&lt;/span&gt;
&lt;span class="s2"&gt;    - since we remember that last `yield` statement we don&amp;#39;t execute it again&lt;/span&gt;
&lt;span class="s2"&gt;    - Generator functions `run n+1` times where n - number of yield keywords in&lt;/span&gt;
&lt;span class="s2"&gt;      a function.&lt;/span&gt;
&lt;span class="s2"&gt;    - You should imagine yield keyword a way of slicing function to small pausable functions&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conclusions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="source-output"&gt;Source Output&lt;/h2&gt;&lt;p&gt;If you are lazy and don't want to run his code. Here is the output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# `yield` a fancy way of pausing execution of a function.

# Let's begin with a complex example

# We can only access value of a generator by itterating over it.

smart_yield item: 0
smart_yield item: 1
smart_yield item: 2
smart_yield item: 3

# Each iteration progresses the code by consuming one `yield` at a time

stupid_yield item: 0
stupid_yield item: 1
stupid_yield item: 2
stupid_yield item: 3
# No more yield keywords exist, let's close the generator


# Generators remember last `yield` they returned

hybrid_yield item: 0
hybrid_yield item: 1
hybrid_yield item: 2
hybrid_yield item: 3
# We have finished executing  hybrid_yield
# Notice that hybrid_yield ran 5 times (intermittently) instead of expected 4


# Conclusions:
    - Yield allows us to pause code execution while  being able to do something else
    - Since we paused execution we can jump back into it at any time.
    - each `yield &amp;lt;value&amp;gt;` is like a `return &amp;lt;value&amp;gt;`
    - since we remember that last `yield` statement we don't execute it again
    - Generator functions `run n+1` times where n - number of yield keywords in
      a function.
    - You should imagine yield keyword a way of slicing function to small pausable functions
&lt;/code&gt;&lt;/pre&gt;
</content></entry><entry><title>Vilnius Living Districts (for expats)</title><link href="https://dovydas.xyz/blog/vilnius-living-districts-for-expats/" rel="alternate"></link><updated>2021-12-01T00:00:00Z</updated><author><name>D.G</name></author><id>urn:uuid:888cd068-1139-377c-ac68-d9ece87fc95e</id><content type="html">&lt;p&gt;Even if I am Lithuanian, I was an expat to the city of Vilnius myself.
Compared to where I was living, this city felt enormous and much different.
Additionally, I had experience living in Copenhagen, so I know how hard it can be sometimes so choose a place to live.&lt;/p&gt;
&lt;p&gt;Although Vilnius is a beautiful and historically old city, it is plagued with the problems of the modern era.
Traffic jams, lack of day-care centers, expensive rent and car parking shortage.
Public transport in Vilnius is decent if you are from Western Europe, and great if you come from US.
There are no metros(tubes) in Vilnius and alternatives as cycling are only viable 6 months a year, due to climate.
Unlike in most large cities in the West Vilnius only has a couple "problematic" district which significant crime rates and general unpleasantness.
So if you are concerned about feeling safe just avoid renting or buying around central train station in 1-2 km radius, and stay away from Naujininkai.&lt;/p&gt;
&lt;p&gt;If any of these issues mentioned are of concern to you, be careful when deciding a district to live in.&lt;/p&gt;
&lt;h2 id="place-suggestions"&gt;Place Suggestions&lt;/h2&gt;&lt;p&gt;If you value green spaces, nature or have a dog pick:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#jeruzale"&gt;Jeruzalė&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#santariskes"&gt;Santariškės&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zirmunai"&gt;Žirmūnai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#antakalnis"&gt;Antakalnis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zverynas"&gt;Žvėrynas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fabijoniskes"&gt;Fabijoniškės&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you value calm and quiet pick:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#jeruzale"&gt;Jeruzalė&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#santariskes"&gt;Santariškės&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zirmunai"&gt;Žirmūnai (near Nėris river)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need cheaper rent pick:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#justiniskes"&gt;Justiniškės&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fabijoniskes"&gt;Fabijoniškės&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you value shoping pick:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#siaures-miestelis"&gt;Šiaurės Miestelis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#seskine"&gt;Šeškinė&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-city-center-and-old-town-senamiestis"&gt;The City Center and Old-Town(Senamiestis)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you will have a car avoid:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-city-center-and-old-town-senamiestis"&gt;The City Center and Old-Town(Senamiestis)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pasilaiciai"&gt;Pašilaičiai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#naujamiestis"&gt;Naujamiestis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you value Nightlife:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-city-center-and-old-town-senamiestis"&gt;The City Center and Old-Town(Senamiestis)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you value security avoid:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#naujamiestis"&gt;1 - 2 km radius from the train station&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Apartments around "Kalvarijų Turgus" (Kalvariju Market)&lt;/li&gt;
&lt;li&gt;Naujininkai (not covered)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need to work or study:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pick a place nearest to your work or university&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition admonition-note"&gt;&lt;p&gt;One additional backwards fact in Lithuania is that, if landlord uses agent to rent his appartament
the tenant(you) will pay the agent-fee most of the time.
It is around 100-200 EUR before you sign the lease contract.
If you are on a tight budget, or want to save some money use links below that say (no agent fees).&lt;/p&gt;&lt;/div&gt;&lt;div class="admonition admonition-warning"&gt;&lt;p&gt;We have quite harsh winters in Lithuania, so if you pick an older building you may end up paying quite a significant amount
for utilities (150-250 EUR) per month just for heating, so factor this in your rent cost.&lt;/p&gt;&lt;/div&gt;&lt;h2 id="useful-links"&gt;Useful Links&lt;/h2&gt;&lt;p&gt;When you pick district or districts you want to live in here are few useful links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/474634139331294"&gt;Appartaments for rent (no agent fees)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.aruodas.lt/"&gt;Biggest appartament portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/ExpatsLithuania"&gt;Expat Facebook group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-city-center-and-old-town-senamiestis"&gt;The City Center and Old-Town(Senamiestis)&lt;/h2&gt;&lt;p&gt;Genesis of the Vilnius city.
Historic monuments such as "Gedimino Pilis", Katedra just to name a few.
It also has plenty of bars and cafes to satisfy all the hipsters and the cosmopolitans.
You should only live there if you only care about nightlife.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beautiful architecture&lt;/td&gt;
&lt;td&gt;Expensive rent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nighlife&lt;/td&gt;
&lt;td&gt;Heating may be expensive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shopping&lt;/td&gt;
&lt;td&gt;Free parking is near impossible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bernardinų Park&lt;/td&gt;
&lt;td&gt;Poor for cycling&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="zirmunai"&gt;Žirmūnai&lt;/h2&gt;&lt;p&gt;The most populated district in Vilnius (it does not mean it is crowded).
Most of the apparent buildings are Soviet-era, but some newly built apartments exist.
It is a quite peaceful neighborhood surrounded by green areas.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cycle friendly&lt;/td&gt;
&lt;td&gt;Very bad traffic jams during rush hours (at Kareivių and Žirmūnų streets)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Plenty of green areas&lt;/td&gt;
&lt;td&gt;Car parking in most of the public yards is quite limited&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Has a beach (Žirmūnai beach)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reasonable rent&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="antakalnis"&gt;Antakalnis&lt;/h2&gt;&lt;p&gt;Second-largest district by area in Vilnius.
Reasonable amount of area in this district is taken up by green places such as forests and parks.
Antakalnis is located near Žirmūnai and they are are separated by the Nėris river.
Antakalnis also suffers heavy traffic issues during rush hours.
Although, it is a quite large district it does not have that many stores or areas for shopping, this means you will have to visit other districts such as Šiaurės Miestelis or Šeškinė. Although it is a large district it is not really well developed and most of the flats for living are situated around Antakalnis street.&lt;/p&gt;
&lt;h2 id="siaures-miestelis"&gt;Šiaurės Miestelis&lt;/h2&gt;&lt;p&gt;One of the sub-districts of Žirmūnai.
Quite simple and nice to live place, most of the apartments are soviet-era, but more recently built ones are available.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Lots of stores and restaurants in “Ogmijos Miestas”&lt;/td&gt;
&lt;td&gt;Very bad traffic jams during rush hours (at Žirmūnų street)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Good public transport options&lt;/td&gt;
&lt;td&gt;Car parking in most of the public yards is quite limited&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cycle friendly&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reasonable rent price&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="justiniskes"&gt;Justiniškės&lt;/h2&gt;&lt;p&gt;Built around 1980 up to this day it is the most depressing district in Vilnius. Some could say that it is almost like a separate city inside a city.
It feels really soviet and the demographics living there reflect that, mostly older people.
Additionally, it is really far away from the city itself.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cheap rent&lt;/td&gt;
&lt;td&gt;Far away from the city&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Gray and depressing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Lacks bigger food and other stores&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Expensive heating&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="pasilaiciai"&gt;Pašilaičiai&lt;/h2&gt;&lt;p&gt;Quite large district with sometimes odd buildings and apartment complexes that are very different from one another.
Since Pašilaičiai is quite large and was built during different time periods, it is hard to generalize the whole district.
What is true about it is that it is really far away from the city center.
If you are looking for an apartment there make sure you avoid appartaments in the Ukmergės g., because it is the busiest street in Vilnius and this street is very noisy.
Since this part of Vilnius is still developed very actively, there are new sub-districts appearing such as Perkūnkiemis with lots of newly built apartments.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Has several large hardware stores&lt;/td&gt;
&lt;td&gt;Very far from the city center&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Decent bicycle roads&lt;/td&gt;
&lt;td&gt;Bad public transportation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Safe&lt;/td&gt;
&lt;td&gt;No bars or cafes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Lacks green spaces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Parking is impossible (around newly built apartaments)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="fabijoniskes"&gt;Fabijoniškės&lt;/h2&gt;&lt;p&gt;Built from 1980 to 1990. Is a quite gray and boring neighborhood.
It has plenty of grocery stores and has quite good public transportation.
This district was filmed in Netflix series Chernobyl as a fake Pripyat movie set.
Although, it is quite gray and boring, it has some private houses located between the apartments.
The district is very Russian friendly, most of the people here speak Russian.
You can often find people drinking in public places here (which is illegal in Lithuania).
If you think about living here, make sure you choose apartments situated around the Fabijoniškių g. or Ateities g. or where city bus 3G rides (this bus is a very quick way to reach the city center)
Fabijoniškės has quite a few of gyms also at the outskirts of it you can find a few small forests.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Reasonable amount of grocery stores and shopping centers&lt;/td&gt;
&lt;td&gt;Lots of public drinking (that is illegal here)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reasonable rent price&lt;/td&gt;
&lt;td&gt;Expensive heating&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Decent public transport to the city center&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="jeruzale"&gt;Jeruzalė&lt;/h2&gt;&lt;p&gt;A nice district to live at is surrounded by a regional park and quite tranquil green areas.
It literally means Jerusalem in Lithuanian.
Alltough it is a little further away from a city center in terms of travel times it is okay.
There are various sorts of appartament buildings in there ones built in the soviet-era, others after 1991. Jeruzalės g. can be quite busy and noisy during rush hours, so I would avoid houses facing this Jeruzalės street.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Green areas and forests&lt;/td&gt;
&lt;td&gt;Few grocery stores&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Decent public transport to the city center&lt;/td&gt;
&lt;td&gt;Apartments for rent may be hard to find&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Good bicycle roads&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="karoliniskes"&gt;Karoliniškės&lt;/h2&gt;&lt;p&gt;Mostly developed during 1971 – 1986. This district similarly to Fabijoniškės is quite gray and depressing.
Very wide streets in some parts of the street give you an impression that humans are not welcomed there.
One notable highlight of this district is the Television tower which gives this district a distinct feel.
The public transportation is quite okay and due to mentioned wide streets traffic during rush hours is not that bad, but some major streets can get jammed up.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Reasonable public transport&lt;/td&gt;
&lt;td&gt;Gray and depressing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reasonable rent&lt;/td&gt;
&lt;td&gt;Parking may be an issue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Large Russian population (pro for some)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="santariskes"&gt;Santariškės&lt;/h2&gt;&lt;p&gt;Relatively small district with little number of apartments available.
This district is located near few beautiful green areas and forests and is quite calm and a safe place to live.
Santariškės a large hospital so if you want a more quite place to live there make sure it is little further away from the Santaros hospital.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Good public transport&lt;/td&gt;
&lt;td&gt;Apartments for rent may be hard to find&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reasonable rent&lt;/td&gt;
&lt;td&gt;Far away from the city center&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Green areas&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Calm&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="seskine"&gt;Šeškinė&lt;/h2&gt;&lt;p&gt;Built in 1977 as a micro-district.
Šeškinė became the district where whole Vilnius comes to shop.
Šeškinė has two biggest shopping centers in Vilnius: „Ozas“ and „Akropolis“.
If you decide on looking for an apartment I would suggest ones found in Gelvonų g. it is a quite calm street with decent public transport.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Good public transport&lt;/td&gt;
&lt;td&gt;Severe traffic during rush hours or weekends&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Two biggest shopping centers&lt;/td&gt;
&lt;td&gt;Parking may be an issue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Great bicycle routes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="lazdynai-and-lazdyneliai"&gt;Lazdynai and Lazdynėliai&lt;/h2&gt;&lt;p&gt;Decent districts to live if you have a car altough it feels that it may be situated further away from the city.
The public transport is great and getting where you want with a car is even better.
These districts have lots of green spaces and are situated near the Vingis Park one of the most beautiful green space in Vilnius.
Most of the apartaments here are soviet-era and large amount of people living there speak Russian.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Good public transport&lt;/td&gt;
&lt;td&gt;Quite far away from the city&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Green spaces&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Large Russian population (pro for some)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Good parking situation&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reasonable rent&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="zverynas"&gt;Žvėrynas&lt;/h2&gt;&lt;p&gt;In Lithuanian „žvėrynas“ means  zoo.&lt;/p&gt;
&lt;p&gt;It is known as the rich-people district in Vilnius.
There is plenty of private homes as well as apartment buildings.
Whole district is surrounded by large green areas and forests.
Some parts of Žvėrynas are at the walking distance of the Vingis Park.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Green spaces&lt;/td&gt;
&lt;td&gt;Expensive rent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Poor public transport&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Apartments for rent may be hard to find&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="snipiskes"&gt;Šnipiškės&lt;/h2&gt;&lt;p&gt;Mixed bag of apartments and other buildings. You can find old wooden houses with chickens running around. Big 16 story soviet block apartments and brand new and steel and glass offices. Šnipiškės has a bussines focused sky-scraper area unofficially called „Shanghai“. Depending on the where you find a place to live Šnipiškės can be a great place. If you are looking for an apartment here make sure you choose flats located around Rinktinės g.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Great public transport&lt;/td&gt;
&lt;td&gt;Apartments may be hard to find&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Near the city center&lt;/td&gt;
&lt;td&gt;The area around Kalvarijų market is "problematic"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Two large shopping centers „CUP“ and „Europa“&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Great for cycling&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="naujamiestis"&gt;Naujamiestis&lt;/h2&gt;&lt;p&gt;Naujamiesties not be confused with Naujininkai (the "problematic" district)
Naujamiestis means „new city“ in Lithuanian.
Although, you should abstain from calling it new.
It was built during WW-I and WW-II.
Most of the houses there have a distinct look to them some of the were built by the Germans and others by Soviets.
The German built apartments need lots of heating so living there may be expensive during the winter season.
There were lots of factories in this district most of those factories are closed-down and either became loft style apartments or just abandoned areas.
It is a unique place to live at, but the rent may be quite pricey.
Also if you end-up living near (1 - 2 km) the central train station may not feel all that safe at times.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Near the train and bus stations&lt;/td&gt;
&lt;td&gt;Parking may be a problem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Diverse selection of apartments&lt;/td&gt;
&lt;td&gt;Public transport may not be that great&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Near the city center&lt;/td&gt;
&lt;td&gt;Lack of green areas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Heating may be expensive&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content></entry><entry><title>Fixing Let's Encrypt Certbot prerequisite issues</title><link href="https://dovydas.xyz/blog/fixing-lets-encrypt-certbot-prerequisite-issues/" rel="alternate"></link><updated>2021-11-30T00:00:00Z</updated><author><name>D.G.</name></author><id>urn:uuid:b0a5d6ef-e316-3802-94e5-dfbf7ffbd90c</id><content type="html">&lt;p&gt;I ran into an issue today when I could not install &lt;code&gt;certbot-auto&lt;/code&gt; on a Linux
machine running CentOS 6.10.&lt;/p&gt;
&lt;p&gt;As it turns out that you need to &lt;strong&gt;enable&lt;/strong&gt;  &lt;strong&gt;EPEL&lt;/strong&gt; package repository with yum package manager.
The error I got during cert bot installation(prior to enabling the &lt;strong&gt;EPEL&lt;/strong&gt;) was:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Package ca-certificates-2018.2.22-65.1.el6.noarch already installed and latest version
Package python-devel-2.6.6-68.el6_10.x86_64 already installed and latest version
No package python-virtualenv available.
Package python-tools-2.6.6-68.el6_10.x86_64 already installed and latest version
No package python-pip available.
Package 1:mod_ssl-2.2.15-69.el6.centos.x86_64 already installed and latest version
Nothing to do
Creating virtual environment...
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 27, in &amp;lt;module&amp;gt;
  File "&amp;lt;stdin&amp;gt;", line 19, in create_venv
  File "/usr/lib64/python2.7/subprocess.py", line 185, in check_call
    retcode = call(*popenargs, **kwargs)
  File "/usr/lib64/python2.7/subprocess.py", line 172, in call
    return Popen(*popenargs, **kwargs).wait()
  File "/usr/lib64/python2.7/subprocess.py", line 394, in _init_
    errread, errwrite)
  File "/usr/lib64/python2.7/subprocess.py", line 1047, in _execute_child
    raise child_exception
OSError: [Errno 2] No such file or directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's focus on the line with &lt;code&gt;No package python-pip available.&lt;/code&gt;.
It turns out that  python-pip &amp;amp; python-virtualenv are EPEL packages.
These are the packages that caused the issue, because cert bot could not install them without EPEL enabled.&lt;/p&gt;
&lt;h2 id="solution/fix"&gt;Solution/Fix&lt;/h2&gt;&lt;p&gt;Install and enable EPEL:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install EPEL&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install epel-release -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open epel config&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/yum.repos.d/epel.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;set &lt;code&gt;enable=1&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[EPEL]
...
#enabled=0
enable=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save &amp;amp; Exit the text editor.
Update packages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Verify that EPEL was enabled:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum repolist | grep epel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If grep matches something similar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# epel        Extra Packages for Enterprise Linux 6 - x86_64       12,568
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then certbot prerequisites should be met.
You can now continue with &lt;a href="https://certbot.eff.org/"&gt;Encrypt's certbot&lt;/a&gt; installation.&lt;/p&gt;
</content></entry><entry><title>Functions are first-class citizens in JavaScript</title><link href="https://dovydas.xyz/blog/functions-are-first-class-citizens-in-javascript/" rel="alternate"></link><updated>2021-11-26T00:00:00Z</updated><author><name>D.G.</name></author><id>urn:uuid:a5191339-08af-33c8-8a71-4c6496950931</id><content type="html">&lt;p&gt;Functions are first-class citizens in JavaScript&lt;/p&gt;
&lt;p&gt;first class citizen entity/type
:  An entity that supports all operations other entities have. This means first-class citizens can be passed, returned &amp;amp; assigned etc.&lt;/p&gt;
&lt;p&gt;To simply put it this means that you can&lt;/p&gt;
&lt;h2 id="assign-a-function-to-a-variable"&gt;Assign a function to a variable&lt;/h2&gt;&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;coolVariable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Cool Anon Function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;coolVariable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Will return a function object, but not print anything to the console.&lt;/span&gt;
&lt;span class="nx"&gt;coolVariable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Will actually call the function.  The magic trick is in the `()`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="pass-a-function-to-a-function"&gt;Pass a function to a function&lt;/h2&gt;&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;randomDecoration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;decors&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Returns a random decoration from an Array&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;decors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;decors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;printDecorated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;decor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// prints:  &amp;quot;X Decorate Me =&amp;quot;&lt;/span&gt;

&lt;span class="nx"&gt;printDecorated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Decorate Me&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;randomDecoration&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Notice that we do not add `()`; when passing it as an object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="partially-apply-or-spawn-a-new-function-from-a-generic-function"&gt;Partially apply or spawn a new function from a generic function&lt;/h2&gt;&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;customRandomDecoration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;decors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;decors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// We will repeat the same decoration n times e.g. xxx, --&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;printDecorated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;decor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="c1"&gt;// We spawn a new function that has custom Decorations and it can be reused&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;randomDecoration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;customRandomDecoration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// prints: &amp;quot;&amp;quot;--- Decorate Me ++++&amp;quot;&lt;/span&gt;

&lt;span class="nx"&gt;printDecorated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Decorate Me&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;randomDecoration&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Sources:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://ryanchristiani.com/functions-as-first-class-citizens-in-javascript/"&gt;Functions as First Class Citizens in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content></entry><entry><title>Creating Multiple Folders From a Bash Array</title><link href="https://dovydas.xyz/blog/creating-multiple-folders-from-a-bash-array/" rel="alternate"></link><updated>2021-09-11T00:00:00Z</updated><author><name>D.G.</name></author><id>urn:uuid:0ce10e0a-be80-3017-8f25-aacbd72f591f</id><content type="html">&lt;p&gt;This snippet allows you to create a series of directories, that are a part of a
regular bash array.
It is useful if you have a number of directories to create and without using a loop.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;


&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;eins&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;var2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zwei&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;play_array&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$var&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$var2&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

mkdir&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;play_array&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Directories created:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── eins/
└── zwei/
&lt;/code&gt;&lt;/pre&gt;
</content></entry><entry><title>Adding Arbitrary Attributes To Python Class</title><link href="https://dovydas.xyz/blog/adding-arbitrary-attributes-to-python-class/" rel="alternate"></link><updated>2021-06-23T00:00:00Z</updated><author><name>D.G.</name></author><id>urn:uuid:c5fc139b-f83d-360b-911d-cd0755628104</id><content type="html">&lt;p&gt;You want to create a dummy class that stores &lt;strong&gt;arbitrary&lt;/strong&gt; attributes and you
want to access these attributes via &lt;code&gt;. (dot)&lt;/code&gt; operator e.g. &lt;code&gt;myClass.age&lt;/code&gt;.  You
can easily do that in Python.  Although using a &lt;em&gt;dictionary&lt;/em&gt; type would be more explicit and
Pythonic 😉.&lt;/p&gt;
&lt;h2 id="the-solution"&gt;The Solution&lt;/h2&gt;&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PlaceholderClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="n"&gt;my_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PlaceholderClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Jon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;surname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Snow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;died?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One case I would find this class useful is when you want to declare a single
database row.
In this case, each row would be a single instance of a class.
And the whole result set could be added to a list.&lt;/p&gt;
</content></entry><entry><title>Generating infinite sequence of bytes set to ones</title><link href="https://dovydas.xyz/blog/generating-infinite-sequence-of-bytes-set-to-ones/" rel="alternate"></link><updated>2021-06-21T00:00:00Z</updated><author><name>D.G.</name></author><id>urn:uuid:0091b12c-52b6-38fe-8e8f-f0aad48cfce5</id><content type="html">&lt;p&gt;After trying to implement my own "one time pad (OTP)" file encryption.  I ran into an issue that
I needed large byte object sequence to write proper unit tests for encryption/decryption.&lt;/p&gt;
&lt;p&gt;For those who don't know, python has a special &lt;code&gt;bytes&lt;/code&gt; object which stores "raw"
data so to speak.  Example of &lt;code&gt;bytes&lt;/code&gt; in action:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00\x00&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;bytes&lt;/code&gt; output explained:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;b'...'   - indicates the the output is a byte string
\x       - escapes 'x' character with '\'. 'x' indicates that output in hex
\x00     - 0 in hex.  Also could be written as 00000000 in binary
\x00\x00 - since we created 2 bytes we 2 bytes stored
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="goal"&gt;Goal&lt;/h2&gt;&lt;p&gt;To write a small function for generating N bytes that are always 0b1111..
e.g.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;one_flood&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xff&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;         &lt;span class="c1"&gt;# 0b11111111 255 in decimal&lt;/span&gt;
&lt;span class="n"&gt;one_flood&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xff\xff&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;     &lt;span class="c1"&gt;# 0b11111111 11111111, 65535 in decimal&lt;/span&gt;
&lt;span class="n"&gt;one_flood&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xff\xff\xff&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# 0b11111111 11111111 11111111,  16777215 in decimal&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="proposed-solution"&gt;Proposed Solution&lt;/h2&gt;&lt;p&gt;It should be noted that this code will only(reliably) work from python version &amp;gt;=3.7.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;one_flood&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_bytes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mb"&gt;0b11111111&lt;/span&gt;  &lt;span class="c1"&gt;# 255&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_bytes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# on first iteration (a = 0) right shift (&amp;lt;&amp;lt;) does nothing.&lt;/span&gt;
        &lt;span class="c1"&gt;# only the OR operator (|) transforms a=0 -&amp;gt; a=255&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;big&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why python &amp;gt;= 3.7?:&lt;/p&gt;
&lt;p&gt;From this version and up &lt;code&gt;int&lt;/code&gt; object has the ability to
increase its size in bytes it variable if can't store any more data.  On older
versions of python &lt;code&gt;int&lt;/code&gt; object would simply overflow. Now this does not happen
so theoretically &lt;code&gt;int&lt;/code&gt; can now be of any size.&lt;/p&gt;
&lt;p&gt;why do we need &lt;code&gt;int&lt;/code&gt; objects if we are creating &lt;code&gt;bytes&lt;/code&gt;?:&lt;/p&gt;
&lt;p&gt;unfortunately python does not support bitwise and logical operations on &lt;code&gt;bytes&lt;/code&gt;
object this means that we must use &lt;code&gt;int&lt;/code&gt; objects for that.&lt;/p&gt;
</content></entry><entry><title>Allow Developers To Deploy Straight To Production</title><link href="https://dovydas.xyz/blog/allow-developers-to-deploy-straight-to-production/" rel="alternate"></link><updated>2021-06-01T00:00:00Z</updated><author><name>D.G.</name></author><id>urn:uuid:e97729c2-7735-3b69-bf9b-f68f37b2d389</id><content type="html">&lt;p&gt;In times when &lt;em&gt;continuous integration&lt;/em&gt; is a new fad there still exists legacy
systems which are not suitable for this flexible way of applying changes.  This
means that your company will be stuck in the eternal purgatory of developers and DevOps working
together on task that developer alone could have done.  Not allowing for your
developer to apply changes for himself is a &lt;strong&gt;stupid methodology&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="it-hinders-personal-growth"&gt;It hinders personal growth&lt;/h2&gt;&lt;p&gt;Learning is a process of making a mistake and learning from it.  True lessons
are learned when you have to think on your feet while being spammed with 10
emails per second about your feature, that broke whole production.  And you know
what &lt;em&gt;“hot learning”&lt;/em&gt; is a nice thing.  Because your developer will be the person who will
fix the problem faster than anyone else, because he most likely formed an
intuition on parts that may break.  Do not outsource the most valuable learning
resource -- mistakes.&lt;/p&gt;
&lt;p&gt;If you compartmentalize duties of your organization like cheap Arduino modules
from eBay you actively create an organization of people who are
overspecialized thus leading the whole company not having a holistic view on
their own system, because your employees are focused on one small part and not
whole project in general.  This means that if something goes wrong there will be
only one or two people who can fix something after a change has been deployed,
but what happens if those two &lt;em&gt;super employees&lt;/em&gt; are on a vacation? Some third
superman will most likely emerge &lt;strong&gt;naturally&lt;/strong&gt;, so why not allow everyone to be
&lt;strong&gt;natural&lt;/strong&gt; from their first feature?  Fires are best handled in houses of firefighters.&lt;/p&gt;
&lt;p&gt;Bugs will are inevitable.  Furthermore, different data yields different bugs.
This is more than true with &lt;em&gt;Enterprise Resourse Planning (ERP)&lt;/em&gt; systems.  From
my own experience and shared experiences of many other ERP developers most of
them seem to arrive to the same two conclusions: 1. clients manage to find complex bugs
first, 2. data creates bugs no matter how thorough you are at hunting them. This is normal, because 
systems with such complexity can't be (and shouldn't be) understood by a single developer.
So if developer deploys the code and some bugs emerge it will most likely be a bug that no
one even thought about.  Just get on with it, since you already trust a
developer to write a piece of code not trusting him to deploy it seems like more
dichotomy rather than a safety measure.&lt;/p&gt;
&lt;h2 id="cost-per-change-is-much-higher"&gt;Cost per change is much higher&lt;/h2&gt;&lt;p&gt;Some big companies need whole departments just to release software, this in an
overkill. If you looked at the majority of
operation departments you would most likely see some old, crusty and manual
deployment rituals that could be made more modern without “risking” the so
required system stability.  Locate parts in your system that require most manual work
and replace them with automation tools or frameworks like: Jenkins, Ansible,
Puppet, Fabric, Kubernetes...&lt;/p&gt;
&lt;p&gt;Additionally, if some other department (or an overspecialized employee) is doing your deployment it creates an
unpleasant dependency on other people no matter how streamlined your deployment
process is, there will to be cases where developer will have to contact the
operations and ask for them to do something &lt;em&gt;"not found in the recipe book"&lt;/em&gt;,
this often creates long threads of emails and answers saying I am not
authorized to authorize you should ask authorization from your superior authority. &lt;strong&gt;Long threads of emails!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally, organizational modularity increases complexity due to lack of cross
domain knowledge.  Operations know very little about programming, while
developer knows very little about deployment.  This makes communication for
these to parties hard from time to time, thus increasing complexity of deployment
process.&lt;/p&gt;
&lt;h2 id="changing-something-takes-much-longer"&gt;Changing something takes much longer&lt;/h2&gt;&lt;p&gt;A clunky deployment ritual will lead to &lt;strong&gt;releases&lt;/strong&gt;.  Releases depending on the
project will occur daily, weekly or even monthly.  This means that code
developer wrote
will be stuck in some sort of "abyss", where it is not used nor tested if it was a big
feature and release took one month and bugs were spotted in production, good look 
expecting that this bug will be fixed quickly, because it is very likely that dev
who wrote the code barely remembers what that feature and assumptions he had
during development of that feature.  This is super unproductive.  Clunky
releases create another issue &lt;em&gt;it releases many features made by many developers&lt;/em&gt;
this means that if something breaks (after a release) there will be name-calling and finger
pointing because no one wants to fix bugs since they are not entirely sure whether it is
a bug they made.  To many cooks spoil the broth.&lt;/p&gt;
&lt;p&gt;Okay, your "bug free" code has been peer reviewed all unit and function tests
passed testing department tested your feature and says it can be released, this
code gets released and BOOM critical bug in production emerges. Now the whole
release gets reverted and you as a developer have to squash that darn thing.  Just because a bug was
critical does not mean it can't be fixed in few minutes.
But since your organization adheres to the dogma of &lt;strong&gt;releases&lt;/strong&gt; you have to be put on hold
and be forced to wait a day, week, month until your patch will be deployed again.
This is also super unproductive, compared to developer deploying code on his own. By deploying code by yourself
you most likely would have fixed it and deployed it again almost instantly and if you saw it is a hard
case you  would make a final decision whether this feature should be
reverted or not.  If a person is capable of making decision on his own
don't outsource that to another department, because your company and the
developer will lose valuable time and energy.&lt;/p&gt;
&lt;p&gt;Also, imagine a case where there let's say three uncaught bugs appear in the release.  This
means that in order to fix everything developer on worst case scenario would
have to wait three whole months just to fix those three simple bugs he would have fixed quickly
on his own without relying on operations deploying three separate fixes.&lt;/p&gt;
&lt;p&gt;Sometimes things go wrong and someone will most likely be bombarded with emails.  Emails
from multiple people saying the same thing: "Feature X broke after most recent
release"  this only distracts everyone involved in the process, because someone has to
respond to these emails and if a developer is responding  then he is wasting his valuable
time rather than fixing a bug he made. This in turn lengthens the whole release
process.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;More individual responsibility for the developer yields greater individual
growth and more productive organization in general.  Allowing a developer to 
deploy his own code reduces number of employees needed to release software.
Developer will be significantly faster when fixing and releasing his code if he
is given an ability to deploy to production since bugs are inevitable.&lt;/p&gt;
&lt;p&gt;If you work in a company who has an old and stubborn  way of releasing software
begin by trying to defuse the barrier between developers and operations, let them
talk and decide how to give more freedom &amp;amp; responsibility to person actually
writing the code.&lt;/p&gt;
</content></entry><entry><title>Using Newsboat to Watch Bitchute</title><link href="https://dovydas.xyz/blog/using-newsboat-to-watch-bitchute/" rel="alternate"></link><updated>2018-08-25T00:00:00Z</updated><author><name></name></author><id>urn:uuid:f4a30b37-4d26-36fa-8da8-f93b5263e711</id><content type="html">&lt;p&gt;First, RSS still qualifies as a great technology.  Even though RSS
faded to obscurity in the past 8 years or so, it is still very useful.  RSS was
and will be an integral part of the internet same as HTTP, e-mail and IRC is.&lt;/p&gt;
&lt;p&gt;In the age when information streams are controlled by few major players, it
important not to forget that we are responsible for what we are consuming.
This is why RSS is great with it, you can aggregate
information from whole variety of sources: YouTube, Twitter, Blogs and even
those old  "Taiwanese Fishermen" sites.&lt;/p&gt;
&lt;p&gt;I recently began using Newsboat RSS client and I fell in love with it.  I loved
it so much that I even added my favorite YouTube channels as RSS feed.  There
are tons of information on how you can watch any YouTube video using &lt;code&gt;youtube-dl&lt;/code&gt;
on a &lt;code&gt;mpv&lt;/code&gt; media player, but I wanted to go one step further I wanted to be able
to watch PeerTube and Bitchute videos (that I subscribed via RSS) straight from my Newsboat client.&lt;/p&gt;
&lt;p&gt;Here is how to do it.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mpv&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;newsboat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;youtube-dl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It goes without saying that this tutorial will only work on Linux/BSD based systems.&lt;/p&gt;
&lt;h2 id="guide"&gt;Guide&lt;/h2&gt;&lt;p&gt;First, Add this function to the end of your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;btpl&lt;span class="o"&gt;(){&lt;/span&gt;

&lt;span class="nv"&gt;PAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PAGE&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-Eoi&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;source [^&amp;gt;]+&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-Eo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src=&amp;quot;[^\&amp;quot;]+&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-Eo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(http|https)://[^&amp;quot;]+&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# url=&amp;quot;$(curl -s $1 | grep -Eoi &amp;#39;&amp;lt;source [^&amp;gt;]+&amp;gt;&amp;#39; | grep -Eo &amp;#39;src=&amp;quot;[^\&amp;quot;]+&amp;quot;&amp;#39; | grep -Eo &amp;#39;(http|https)://[^&amp;quot;]+&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;TITLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PAGE&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-oEi&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;title&amp;gt;(.*)&amp;lt;/title&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cut&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f2&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cut&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f1&lt;span class="k"&gt;)&lt;/span&gt;

mpv&lt;span class="w"&gt; &lt;/span&gt;--ontop&lt;span class="o"&gt;=&lt;/span&gt;yes&lt;span class="w"&gt; &lt;/span&gt;--title&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$TITLE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--snap-window&lt;span class="w"&gt; &lt;/span&gt;--autofit-larger&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;25%&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--geometry&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-10-10&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.75&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's explain some parameters of the command above:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--ontop=yes&lt;/code&gt;
:  this will always display the video window on top. I did this because I wanted
something similar to "Picture In Picture" feature found on OSX machines.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--title=$TITLE&lt;/code&gt;
:  it is the title of the mpv window.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--snap-window&lt;/code&gt;
:  this is optional, but it helps when you are moving the window around the
screen, because it snaps it to the 4 corners of the screen.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--autofit-larger='25%'&lt;/code&gt;
:  resizes the window to 25% (based on what is bigger width or height).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--geometry='-10-10'&lt;/code&gt;
:  Displays the &lt;code&gt;mpv&lt;/code&gt; player window to the BOTTOM RIGHT corner and makes sure that
there is a 10px margin.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--speed 1.75&lt;/code&gt;
:  sets playback speed to 1.75 times the original.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open a new terminal window, and paste code below:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;btpl https://www.bitchute.com/video/UGlrF9o9b-Q/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If all went well, video should start playing.&lt;/p&gt;
&lt;p&gt;&lt;img src="btpl-screen-success.png" alt="success"&gt;&lt;/p&gt;
&lt;h2 id="configure-newsboat"&gt;Configure Newsboat&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Open your Newsboat configuration file: &lt;code&gt;~/.newsboat/config&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;on some linux distros this file is found at: &lt;code&gt;~/.config/newsboat/config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Paste these lines below:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# only for OSX
browser open

# only for Debian
browser nautilus

# only for bash users
macro b set browser "source $HOME/.bashrc &amp;amp;&amp;amp; btpl "; open-in-browser ; set browser open

# only for zsh users
macro b set browser "source $HOME/.zshrc &amp;amp;&amp;amp; btpl "; open-in-browser ; set browser open
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;browser open&lt;/code&gt;
:  This line is not talking about your web browser, but rather the browser of
your OS. On OSX system browser is &lt;code&gt;open&lt;/code&gt; it handles many things: opens files,
handles various URLs, decides which program should open which file.  Linux Arch
users will probably use &lt;code&gt;linkhandler&lt;/code&gt;, for Debian'istas it will be &lt;code&gt;nautilus&lt;/code&gt;
and Linux Mints should use &lt;code&gt;nemo&lt;/code&gt; instead of &lt;code&gt;open&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;macro b set browser [...]&lt;/code&gt;
:  sets a macro on key press "b".  Now every time you press &lt;code&gt;",b"&lt;/code&gt; characters
while in Newsboat. Hotkey for starting macros is always &lt;code&gt;","&lt;/code&gt; read more about
macros &lt;a href="https://newsboat.org/releases/2.12/docs/newsboat.html"&gt;here&lt;/a&gt;
For more info about Newsboat config, you can go &lt;a href="https://newsboat.org/releases/2.12/docs/newsboat.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="add-a-bitchute-rss-test-url"&gt;Add a Bitchute RSS test URL&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Open your Newsboat URLs file: &lt;code&gt;~/.newsboat/urls&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;on some linux distros this file is found at: &lt;code&gt;~/.config/newsboat/urls&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Paste this line below:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;https://www.bitchute.com/feeds/rss/channel/styxhexenhammer666/ "news"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Start the Newsboat:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;newsboat
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Find The RSS feed we just added&lt;/li&gt;
&lt;li&gt;List all the items:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="how-to-invoke.png" alt="how-to-invoke"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hit: &lt;code&gt;",b"&lt;/code&gt; to start the video playback&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="last-words"&gt;Last Words&lt;/h2&gt;&lt;p&gt;That is it you should be able to watch any Bitchute video on your mpv player
straight from Newsboat RSS feed.  That is pretty cool and proved to be quite
useful.  I love the fact that mpv is highly customizable, and I can mimic the
&lt;code&gt;picture-in-picture&lt;/code&gt; I really wanted.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want to learn more about Newsboat Luke Smith has a great &lt;a href="https://www.youtube.com/watch?v=dUFCRqs822w"&gt;video&lt;/a&gt; on it&lt;/li&gt;
&lt;li&gt;If you are interested where I came up with the bitchute-dl idea see this &lt;a href="https://www.bitchute.com/video/W4g3Jktibucb/"&gt;video&lt;/a&gt; and the original &lt;a href="https://archive.fo/zd49L"&gt;script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you want to see my current Newsboat configuration visit &lt;a href="https://github.com/dovydasgulbinas/env-configs/tree/master/newsboat"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Few lessons I learned after using python fabric 1.x</title><link href="https://dovydas.xyz/blog/few-lessons-i-learned-after-using-python-fabric-1x/" rel="alternate"></link><updated>2018-08-19T00:00:00Z</updated><author><name></name></author><id>urn:uuid:db5c70e0-1f0c-3b4f-9ea8-7a5f70debb03</id><content type="html">&lt;p&gt;&lt;a href="https://docs.fabfile.org/en/1.14/"&gt;Fabric&lt;/a&gt; is a great framework for executing code on remote &amp;amp; local machines. The 1.X had a
pretty good documentation, but workflows and tools were not so clearly
explained, after writing several scrips myself, I managed to come up with a few rules that I believe others will find to be useful.&lt;/p&gt;
&lt;h2 id="default-function-arguments"&gt;Default function arguments&lt;/h2&gt;&lt;p&gt;using &lt;code&gt;env.*&lt;/code&gt; in method bodies is a bad idea, but it can be made better:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;default_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;default_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sys_default_path&lt;/span&gt;
        &lt;span class="c1"&gt;# this will make function more reusable in other scripts, because&lt;/span&gt;
        &lt;span class="c1"&gt;# you can simply delete this if part and all env.* specific vars are&lt;/span&gt;
        &lt;span class="c1"&gt;# no longer a problem&lt;/span&gt;

    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls -alt &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;setting &lt;code&gt;default_path&lt;/code&gt; inside an if statement makes function more reusable.&lt;/li&gt;
&lt;li&gt;if you use &lt;code&gt;def list_root(default_path=env.sys_default_path):&lt;/code&gt;  it will be
incompatible with paragraph [$5].&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="split-your-code-to-python-modules"&gt;Split your code to Python modules&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;|- nodes.py (servers)
|- installers.py
|- services.py
`- fabfile.py (imports files above)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your code will outgrow a single file, trust me.  Think about module structure
first!  More info about splitting to modules is &lt;a href="https://docs.fabfile.org/en/1.14/usage/tasks.html?highlight=modules"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="use-more-global-module-constants"&gt;Use more global module constants&lt;/h2&gt;&lt;p&gt;If modules global are not enough only then use &lt;code&gt;env.*&lt;/code&gt;&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;

&lt;span class="c1"&gt;# we know that this will never change, so let&amp;#39;s store it in a constant&lt;/span&gt;
&lt;span class="n"&gt;ALL_CAPS_CAPS_LOCK_TEST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;armstrong&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Import constant from module below:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nasa.hax&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hacked_user&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ALL_CAPS_CAPS_LOCK_TEST&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nasa.org:22&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ALL_CAPS_CAPS_LOCK_TEST&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prod_env&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;prod-server.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="differentiate-environments"&gt;Differentiate environments&lt;/h2&gt;&lt;p&gt;Use Python methods to define different environments:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test-server.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prod_env&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;prod-server.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_server&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# we don&amp;#39;t call env hosts inside this func body, because we want test-server&lt;/span&gt;
    &lt;span class="c1"&gt;# to be the default server because, writing: `$ fab test_server [...]` is annoying&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_home&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls -alt $HOME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;call these methods in your terminal&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;fab&lt;span class="w"&gt; &lt;/span&gt;prod_env&lt;span class="w"&gt; &lt;/span&gt;list_home&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# this will execute code on prod server&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;fab&lt;span class="w"&gt; &lt;/span&gt;test_env&lt;span class="w"&gt; &lt;/span&gt;list_home&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# this will execute code on test server &lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;fab&lt;span class="w"&gt; &lt;/span&gt;list_home&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# this will execute code on test server because `env.hosts` are global in fabfile.py module&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="use-one-execution-context-per-function"&gt;Use One Execution Context Per Function&lt;/h2&gt;&lt;p&gt;If possible, do not mix execution functions like &lt;code&gt;root()&lt;/code&gt;,  &lt;code&gt;run()&lt;/code&gt; or &lt;code&gt;local()&lt;/code&gt; inside one function.&lt;/p&gt;
&lt;p&gt;Excessive usage of mixed execution methods will make your function very hairy and messy,
because in order to write a generic method that you can run both locally, and remotely you will need to write many &lt;code&gt;if&lt;/code&gt;
statements also giving your function tons of default parameters when doing a
subsystem call.&lt;/p&gt;
&lt;p&gt;The optimal way is to avoid mixing subsystem functions: &lt;code&gt;root()&lt;/code&gt;, &lt;code&gt;run()&lt;/code&gt;, &lt;code&gt;local()&lt;/code&gt; in Fabric method you are writing.
The benefits of not mixing these functions in a method is that you can pass them as needed as a function variable:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.state&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;


&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;troubled.man&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nasa.org:22&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# bad&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;which_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run_local&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run_remote&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run_root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;run_local&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whoami&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;run_remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whoami&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;



&lt;span class="c1"&gt;# good&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;which_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whoami&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;which_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# this will print user of your local machine&lt;/span&gt;
&lt;span class="n"&gt;which_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# this will print `troubled.man`&lt;/span&gt;
&lt;span class="n"&gt;which_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# this will print `root` (because in linux sudo command temporaraly changes your user to root)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You made a function that does 3 different things by passing a single parameter.
That is why you want consistency in your code execution functions.&lt;/p&gt;
&lt;h2 id="do-not-mix-python-versions"&gt;Do Not Mix Python Versions&lt;/h2&gt;&lt;p&gt;Fabric 1.x is written in Python 2.7, but most of the newer projects are written in Python
3.x.  This means that you can't simply pip install fabric to a python 3.X
environment this results in you having to change virtual or Anaconda environments
when doing fabric calls, see example below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ source activate py27  # activating anaconda python=2.7 env
$ python manage.py runserver  # for example let's call django app writen in 3.X

  File "manage.py", line 15
    ) from exc
         ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What just happened that once I activate my virtual environment python executable
path changes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ which python
/usr/bin/python
$ source activate py27
$ which python
~/anaconda/envs/py27/bin/python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that is the reason why Django app in example below did not start.  One
possible fix is to use &lt;code&gt;py27&lt;/code&gt; environment always.  And modify &lt;code&gt;fabfile.py&lt;/code&gt; to
activate python3 environment locally when needed.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.state&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;


&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;armstrong&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nasa.org:22&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source activate py36 &amp;amp;&amp;amp;&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# let&amp;#39;s assume our django app is running, on 3.6&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prod_env&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# we assume default python path is 3.X on prod_env&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;caller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_env&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;python_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# let&amp;#39;s use runtime of our environment&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;runtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;

    &lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; python -V&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;agnostic_python_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env_func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;prod_env&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;this will print whichever version is on the remote server&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;env_func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# calls any environment function you set&lt;/span&gt;
    &lt;span class="n"&gt;python_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    in this case we can use caller=env.* as&lt;/span&gt;
&lt;span class="sd"&gt;    default parameter, because we explicitly set by calling env_func&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;$ fab local_env python_version
[localhost] local: source activate py36&amp;amp;&amp;amp; python -V
Python 3.6.3 :: Anaconda, Inc.

# now let's hack into nasa

$ fab agnostic_python_version
[herver.local] Executing task 'agnostic_python_version'
[herver.local] run:  python -V
[herver.local] out: Python 2.7.13
[herver.local] out:


Done.
Disconnecting from nasa.org... done.
&lt;/code&gt;&lt;/pre&gt;
&lt;!--
;[f]: https://docs.fabfile.org/en/1.14/ 
;[s]: https://sdf.org/
;[ms]: https://docs.fabfile.org/en/1.14/usage/tasks.html?highlight=modules#namespaces

;layout: post
;comments: true
;date: 2018-08-19 18:20:13
;date_updated: 
;tags: devops fabric python
--&gt;</content></entry><entry><title>Grice's Maxims Pythonic Edition</title><link href="https://dovydas.xyz/blog/grices-maxims-pythonic-edition/" rel="alternate"></link><updated>2018-07-13T00:00:00Z</updated><author><name></name></author><id>urn:uuid:b3bab3cb-48a6-305d-972b-6bb3860c54ca</id><content type="html">&lt;p&gt;Which is better verbose paragraphs or lean and on point sentences?
Why communication with other people can sometimes be so hard sometimes, even though we you
are discussing basic things? 
Why sometimes we get frustrated with other people speaking?  Why sometimes you lose your marbles when someone else skips steps in
a tutorial, uses incorrect technical term or when someone assumes something to
be true without asserting his assumption?&lt;/p&gt;
&lt;p&gt;Well in most cases it comes down to basic psychology during an any transaction, verbal, economic or other.
These transactions don't even have to be between two people, because we get mad and
frustrated about objects as well.&lt;/p&gt;
&lt;p&gt;For example, your phone dies when it had 25% of battery, 
you probably get mad and say "What a piece of crap, I can't believe 25% of my
battery only lasted few minutes".&lt;/p&gt;
&lt;p&gt;You get mad because of these 2 things: first there is &lt;strong&gt;expected outcome&lt;/strong&gt;, second is &lt;strong&gt;actual outcome&lt;/strong&gt;.
When we &lt;strong&gt;expect&lt;/strong&gt; more from a phone's battery than it can &lt;strong&gt;actually&lt;/strong&gt; deliver, we get angry!
This paradigm of looking at transactions extends to various places as well as our daily lives.
One of the places is language and communication in general. 
If someone says one thing and does another, we get angry because we &lt;strong&gt;expected&lt;/strong&gt; one thing and &lt;strong&gt;actually&lt;/strong&gt; got something entirely different.&lt;/p&gt;
&lt;p&gt;One philosopher who tried to tackle this problem was &lt;a href="https://en.wikipedia.org/wiki/Paul_Grice"&gt;Paul Grice&lt;/a&gt;
He distilled and abstracted the rules needed for successful communication and
these rules are now called &lt;a href="https://www.sas.upenn.edu/"&gt;Grice's Maxims&lt;/a&gt; these maxims should help you out
to cooperate better and to understand why sometimes you annoy or get annoyed by
others.&lt;/p&gt;
&lt;p&gt;In general these maxims are great, but for me were rather "dry" and hard to
remember while &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen Of Python&lt;/a&gt; for some weird reason just sticks in your head.
Thus &lt;em&gt;Grice's Maxims Pythonic Edition&lt;/em&gt; was born.  Furthermore &lt;em&gt;Zen Of Python&lt;/em&gt; on
its own can be used daily in some life situations.&lt;/p&gt;
&lt;h4 id="1-quantity"&gt;1. Quantity&lt;/h4&gt;&lt;p&gt;More informative is better than less informative, although conciseness beats verbosity.&lt;/p&gt;
&lt;h4 id="2-quality"&gt;2. Quality&lt;/h4&gt;&lt;p&gt;Provable is better than unprovable.&lt;/p&gt;
&lt;p&gt;In the face of uncertainty, refuse the temptation to say things you may think are false.
If your claim has no supporting evidence it's a bad idea, if your claim has supporting evidence maybe it's a good Idea.&lt;/p&gt;
&lt;h4 id="3-relation"&gt;3. Relation&lt;/h4&gt;&lt;p&gt;Relevant is better than irrelevant.&lt;/p&gt;
&lt;h4 id="4-manner"&gt;4. Manner&lt;/h4&gt;&lt;p&gt;Certainty is better than obscurity.&lt;/p&gt;
&lt;p&gt;Clarity is better than ambiguity.&lt;/p&gt;
&lt;p&gt;Brief is better than lengthy.&lt;/p&gt;
&lt;p&gt;Order is better than chaos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hope this short post was useful. These maxims should help you to be a better speaker and listener as long as you will not forget
the reason why you get derailed.  Remember it is easier to change yourself and your
outlook rather than the people around you.
So go try to be a better communicator by using at least few rules I presented.&lt;/p&gt;
</content></entry><entry><title>Creating A Production Ready Django App (cont.)</title><link href="https://dovydas.xyz/blog/creating-a-production-ready-django-app-cont/" rel="alternate"></link><updated>2018-07-07T00:00:00Z</updated><author><name></name></author><id>urn:uuid:7e010786-c14c-35c1-93ab-d69f1c7b4c42</id><content type="html">&lt;p&gt;Before reading this, please make sure you are familiar with concepts and ideas
covered in the pt.1 of this &lt;a href="https://dovydas.xyz/django/python/devops/skeleton/2018/06/27/creating-a-production-ready-django-app-pt1.html"&gt;post&lt;/a&gt;.  This post will be short and will simply
create an additional file that will help us out with deployment task automation.
The code for this project will be available at this &lt;a href="https://github.com/dovydasgulbinas/blog-django-skeleton"&gt;git repository&lt;/a&gt; make sure you
checkout to git branch pt2! Also if you are not lazy 😉 I highly encourage you to
do all the steps in this tutorial manually.&lt;/p&gt;
&lt;h2 id="create-fabric-file"&gt;Create Fabric File&lt;/h2&gt;&lt;p&gt;In this stage we will create a new &lt;strong&gt;fabfile.py&lt;/strong&gt;. This file will contain all
the useful devops functions we will write and define.  Keep in mind that
&lt;strong&gt;fabric2&lt;/strong&gt; as oppose to &lt;strong&gt;fabric&lt;/strong&gt; is relatively very new and still under
active development.  The biggest benefit of the fabric2 is that it runs on
python2.7 and python3.4+.  This means you will not need to hack your system path
variables (on your terminal) every time your project is written on python 3.4+,
because fabric package installed using pip3 will simply crash.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;my-django-repo&amp;gt;
cd &amp;lt;cool_project&amp;gt;
source ../env/bin/activate
pip install fabric2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now close and reopen new terminal window, because sometimes &lt;strong&gt;stubs&lt;/strong&gt; installed via
pip do not work.  &lt;strong&gt;Stub&lt;/strong&gt; for those who do not know is a python script that is
not a library, stubs are used as &lt;strong&gt;standalone&lt;/strong&gt; scripts, that help us out with
various tasks.  Stubs can be called from terminal directly as long as the stub
directory is in your &lt;code&gt;$PATH&lt;/code&gt; variable.  Every python virtual environment will
have its own stub directory in our case they are stored at &lt;code&gt;../env/bin/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since we closed the terminal we need to activate virtual env again!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;my-django-repo&amp;gt;
cd &amp;lt;cool_project&amp;gt;
source ../env/bin/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By now you should notice that the last line you have called calls a python stub
called &lt;strong&gt;activate&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="create-fabric-script"&gt;Create Fabric Script&lt;/h2&gt;&lt;p&gt;We need to create a new fabric.py file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;my-django-repo&amp;gt;
cd &amp;lt;cool_project&amp;gt;
touch fabfile.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now copy contents below to &lt;code&gt;fabfile.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="c1"&gt;# These constants are Hacky, but for now I do not know how to fix it using&lt;/span&gt;
&lt;span class="c1"&gt;# invoke, because invoke does not load exported variables of my terminal session&lt;/span&gt;
&lt;span class="n"&gt;AC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export TERM=xterm-256color; source ../env/bin/activate&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ACA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AC&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;amp;&amp;amp; &amp;#39;&lt;/span&gt;



&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;penv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACA&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/bin/env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACA&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pip freeze &amp;gt; requirements.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;shellbp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACA&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bpython -i manage.py shell&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACA&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;manage.py shell&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACA&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;manage.py runserver&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;purge_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACA&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;find . -d -name __pycache__ -exec rm -rf &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; \;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACA&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;manage.py test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="test-the-fabric2"&gt;Test The Fabric2&lt;/h2&gt;&lt;p&gt;Using fabric2 CLI is relatively painless.  You Can list all the available tasks
by calling &lt;code&gt;fab2 -l&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;let's list fab2 tasks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fab2 -l
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;let's start our Django project using fab2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fab2 run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;asciinema-player src="/data/cinemas/fab2.cast" cols="90" rows="25"&gt;&amp;lt;/asciinema-player&amp;gt;&lt;/p&gt;
&lt;h1 id="outro"&gt;Outro&lt;/h1&gt;&lt;p&gt;This was a brief tutorial it did not even scratch the surface of fabric2 I highly recommend you to check. The &lt;code&gt;fabfile.py&lt;/code&gt;
for yourself and try to understand what is written in that script.  I want to warn you that I may update the &lt;code&gt;fabfile.py&lt;/code&gt; snippet showed in this blogpost, but this will be only for the greater good, because I currently have not fiugred out a way of importing bash environment variables to Nagios (Nagios is the core lib of fabric2).  Happy hacking and please do leave questions and suggestions in the comments.&lt;/p&gt;
</content></entry><entry><title>Creating A Production Ready Django App</title><link href="https://dovydas.xyz/blog/creating-a-production-ready-django-app-pt-1/" rel="alternate"></link><updated>2018-07-01T00:00:00Z</updated><author><name></name></author><id>urn:uuid:87706d0d-a509-34a8-a39a-dfde03431098</id><content type="html">&lt;p&gt;This post will demonstrate a production tested and simplified
configuration for Django framework. This is a two part blog post.
In the first part we will mainly focus how to structure &lt;code&gt;settings.py&lt;/code&gt;
properly because with larger projects managing &lt;code&gt;settings.py&lt;/code&gt; file
will usually result in an unpleasant experience somewhere around your anal area.
Furthermore this post will show you the best practices of keeping secrets such
as passwords hidden from your CVS.&lt;/p&gt;
&lt;p&gt;This tutorial will use &lt;strong&gt;git&lt;/strong&gt; and &lt;strong&gt;virtual&lt;/strong&gt; environment so make sure
you have these programs installed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Word &lt;strong&gt;test&lt;/strong&gt; in this blog post is synonymous with word &lt;strong&gt;development&lt;/strong&gt;.
this means that files such as &lt;code&gt;settings_test.py&lt;/code&gt; could also be called
&lt;code&gt;settings_dev.py&lt;/code&gt; keep that in mind!&lt;/p&gt;
&lt;h2 id="initialize-new-django-project"&gt;Initialize New Django Project&lt;/h2&gt;&lt;p&gt;go to dir you want your django project installed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~/&amp;lt;your-projects-dir&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create a folder for our django repository:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir &amp;lt;my-django-repo&amp;gt;
cd &amp;lt;my-django-repo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create documentation entries:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir docs
touch readme.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create and activate a virtual environment (with python3):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;virtualenv --python="$(which python3)" env
source env/bin/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create a basic &lt;code&gt;.gitignore&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo "*.pyc" &amp;gt;&amp;gt; .gitignore
echo "env/" &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install Django:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install django
pip install ConfigParser
pip install sphinx  # (optional, used for documentation)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start a new project:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;django-admin.py startproject &amp;lt;cool_project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start a new app (optional):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;cool_project&amp;gt;
python manage.py startapp &amp;lt;sexy_app&amp;gt;
cd ../
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create folders for further use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir .secrets
mkdir logs
mkdir static  # optional but I recommend creating one
mkdir sandbox # optional for experiments and other stuff
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add non-tracked directories to &lt;code&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo ".secrets/" &amp;gt;&amp;gt; .gitignore
echo "logs/" &amp;gt;&amp;gt; .gitignore
echo "static/" &amp;gt;&amp;gt; .gitignore
echo "sandbox/" &amp;gt;&amp;gt; .gitignore
echo '*.sqlite3' &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of you may scream that creating &lt;strong&gt;logs or secrets&lt;/strong&gt; dir in repo directory
is madness.  But bear with me, in production environment this will not be
a directory but rather a &lt;strong&gt;symlink&lt;/strong&gt; to e.g.:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./logs -&amp;gt; /var/log/django/logs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This symlink method will allow us to use less
configuration, because both dev and prod environments will write
logs to the same directory.  Additionally we will decouple
our &lt;code&gt;settings.py&lt;/code&gt; configuration from OS based paths such as:
&lt;code&gt;/var/log/django/logs&lt;/code&gt; since any absolute path is &lt;strong&gt;not system agnostic&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;your project structure should look like this (tree depth=2):&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├──&lt;span class="w"&gt; &lt;/span&gt;.gitignore
├──&lt;span class="w"&gt; &lt;/span&gt;.secrets
├──&lt;span class="w"&gt; &lt;/span&gt;cool_project
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;cool_project
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;manage.py
├──&lt;span class="w"&gt; &lt;/span&gt;docs
├──&lt;span class="w"&gt; &lt;/span&gt;env&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# # this dir is irrelevant&lt;/span&gt;
├──&lt;span class="w"&gt; &lt;/span&gt;logs
├──&lt;span class="w"&gt; &lt;/span&gt;readme.md
├──&lt;span class="w"&gt; &lt;/span&gt;sandbox
└──&lt;span class="w"&gt; &lt;/span&gt;static
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="create-prod-and-test-settings-files"&gt;Create Prod and Test Settings Files&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;cd &amp;lt;cool_project&amp;gt;
cd &amp;lt;cool_project&amp;gt;
mkdir conf
cd conf
touch __init__.py
printf "from .settings_main import *\n# Test Setting Overrides\n" &amp;gt; settings_test.py
printf "from .settings_main import *\n# Prod Setting Overrides\n" &amp;gt; settings_prod.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we just created a new python package for our settings in the snippet above.
this package will contain two different config files.  The reason why
we did this is because we want to have &lt;em&gt;settings inheritance&lt;/em&gt;[^1].  This means
that we will define our core configuration in &lt;code&gt;settings_main.py&lt;/code&gt; while
minor overrides based on the environment(test, prod) will be done in their
appropriate files &lt;code&gt;settings_test.py&lt;/code&gt; and  &lt;code&gt;settings_prod.py&lt;/code&gt;. This makes
our configuration structure more similar to one you would find in &lt;strong&gt;Nginx&lt;/strong&gt;.&lt;br&gt;
Nginx like configuration structure forces your &lt;code&gt;settings&lt;/code&gt; to be &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;enable &lt;code&gt;test&lt;/code&gt; settings for our project:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ln -s settings_test.py settings.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Symlinks again! This symlink is the magic symlink that will allow
us to quick swap our production and test settings even when developing.
This is very useful, because it is very likely that you will need to
run your Django project with production settings on your development machine.
So if you ever need to use &lt;code&gt;settings_prod.py&lt;/code&gt; simply: &lt;code&gt;ln -s ./settings_prod.py settings.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;move settings file from its original position:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv ../settings.py ./settings_main.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;what we did here is we said &lt;em&gt;goodbye&lt;/em&gt; to original path of the
&lt;code&gt;settings.py&lt;/code&gt; file this file was created when running &lt;code&gt;django-admin.py startproject &amp;lt;cool-project&amp;gt;&lt;/code&gt;.
As I already mentioned we will use it for &lt;em&gt;settings inheritance&lt;/em&gt;[^1]&lt;/p&gt;
&lt;p&gt;edit &lt;code&gt;wsgi.py&lt;/code&gt; file so that it will point to our new &lt;code&gt;settings.py&lt;/code&gt; symlink:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim ../wsgi.py

# change this line from:
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "&amp;lt;cool_project&amp;gt;.settings")

# to:
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "&amp;lt;cool_project&amp;gt;.conf.settings")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;edit &lt;code&gt;manage.py&lt;/code&gt; file so that it will point to &lt;code&gt;settings.py&lt;/code&gt; symlink:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim ../../manage.py

# change this line from:
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "&amp;lt;cool_project&amp;gt;.settings")

# to:
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "&amp;lt;cool_project&amp;gt;.conf.settings")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Last two snippets needed changing because if you recall we created
a new python module called &lt;code&gt;conf&lt;/code&gt; this meant that module which holds Django project settings
has changed so we needed to tell &lt;code&gt;manage.py&lt;/code&gt; and &lt;code&gt;wsgi.py&lt;/code&gt; to take our project
settings from a new location&lt;/p&gt;
&lt;p&gt;test your server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ../..
source ../env/bin/activate &amp;amp;&amp;amp; python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If development server started without any issues GZ! You have a Django
project skeleton.  Follow chapters below as we add a special file used to keep
our passwords away from CVS.&lt;/p&gt;
&lt;p&gt;do your initial git commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ..
git init
git status
git add .gitignore
git add .
git commit -m "Initial Django Commit"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;repository directory structure demo:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├──&lt;span class="w"&gt; &lt;/span&gt;.git&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# this dir is irrelevant&lt;/span&gt;
├──&lt;span class="w"&gt; &lt;/span&gt;.gitignore
├──&lt;span class="w"&gt; &lt;/span&gt;.secrets
├──&lt;span class="w"&gt; &lt;/span&gt;.swp
├──&lt;span class="w"&gt; &lt;/span&gt;cool_project
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;cool_project
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;__init__.py
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;conf
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;__init__.py
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;settings.py&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;settings_test.py
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;settings_main.py
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;settings_prod.py
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;settings_test.py
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;db.sqlite3
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;urls.py
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;wsgi.py
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;manage.py
├──&lt;span class="w"&gt; &lt;/span&gt;docs
├──&lt;span class="w"&gt; &lt;/span&gt;env&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# this dir is irrelevant&lt;/span&gt;
├──&lt;span class="w"&gt; &lt;/span&gt;logs
├──&lt;span class="w"&gt; &lt;/span&gt;readme.md
├──&lt;span class="w"&gt; &lt;/span&gt;sandbox
└──&lt;span class="w"&gt; &lt;/span&gt;static
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="append-the-settings-file"&gt;Append the settings file&lt;/h2&gt;&lt;p&gt;In this chapter we will add extra few essentials such as log file configuration,
passwords, secrets and more.  I recommend you to copy code found below.
Lines you copy and paste will include comments make sure you read them.&lt;/p&gt;
&lt;p&gt;create a &lt;code&gt;secrets.ini&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch .secrets/secrets.ini
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;paste this to &lt;code&gt;.secrets/secrets.ini&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[prod]
secret_key = '&amp;lt;your_production_secret_key&amp;gt;'

[test]
secret_key = '&amp;lt;your_test_secret_key&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;secret_key = '...'&lt;/code&gt;
:  This is your production server secret key.  It must not match one under the [test]
section.  Read more about it &lt;a href="https://docs.djangoproject.com/en/2.0/ref/settings/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;delete lines in &lt;code&gt;settings_main.py&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="delet-settings-main.jpg" alt="DELET-LINES"&gt;&lt;/p&gt;
&lt;p&gt;paste new lines in the same area &lt;code&gt;settings_main.py&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="add-settings-main.jpg" alt="ADD-LINES"&gt;&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;configparser&lt;/span&gt;

&lt;span class="c1"&gt;# SECURITY WARNING: don&amp;#39;t run with debug turned on in production!&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;SECTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# when using production then SECTION = &amp;#39;prod&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# we create a base directory 2 parent directories UP.&lt;/span&gt;
&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# we need to go one dir up because our settings file in one folder deeper than default&lt;/span&gt;
&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;SECRETS_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.secrets&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SECRETS_FILE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SECRETS_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;secrets.ini&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LOGS_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LOG_MAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGS_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django_main.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;CONF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;CONF&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SECRETS_FILE_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# this is a magic line, because based on what value SECTION= holds we will&lt;/span&gt;
&lt;span class="c1"&gt;# able to choose our settings in this case test OR prod&lt;/span&gt;
&lt;span class="n"&gt;SECRETS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONF&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SECTION&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# we grab our `secret_key` from our `secrets.ini` file&lt;/span&gt;
&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SECRETS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secret_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;basic&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;disable_existing_loggers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;# you can have as many formatter you want.  assign different formatters to&lt;/span&gt;
    &lt;span class="c1"&gt;# different handlers&lt;/span&gt;

    &lt;span class="s1"&gt;&amp;#39;formatters&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;simple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;multi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(&lt;/span&gt;&lt;span class="si"&gt;%(threadName)-10s&lt;/span&gt;&lt;span class="s1"&gt;) &lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="s1"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;applogfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;logging.FileHandler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;LOG_MAIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;formatter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;multi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;console&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;logging.StreamHandler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;formatter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;multi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;# every django app you create will have to have their logger set. set them&lt;/span&gt;
    &lt;span class="c1"&gt;# here in the &amp;#39;loggers&amp;#39; object. loggers[&amp;#39;django&amp;#39;] is the name of our project&lt;/span&gt;
    &lt;span class="c1"&gt;# leave it as is.&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;loggers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;django&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;applogfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;console&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;test run your project again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;place where manage.py is found&amp;gt;
source ../env/bin/activate
python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add lines to &lt;code&gt;settings_prod.py&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;This is where the override magic kicks in. Rather than writing our whole
configuration from scratch we simply override values we want to change.&lt;/p&gt;
&lt;p&gt;&lt;img src="add-settings-prod.jpg" alt="ADD-PROD-LINES"&gt;&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;using PRODUCTION settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;SECTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;prod&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SECRETS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONF&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SECTION&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# uses section [prod] in secrets.ini&lt;/span&gt;

&lt;span class="n"&gt;SESSION_COOKIE_SECURE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;ADMIN_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;SECURE_CONTENT_TYPE_NOSNIFF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="c1"&gt;# JUST AS AN ILLUSTRATIVE EXAMPLE&lt;/span&gt;
&lt;span class="c1"&gt;# overrides sqlite3 DB to a production ready postgress one&lt;/span&gt;
&lt;span class="c1"&gt;# DATABASES[&amp;#39;default&amp;#39;][&amp;#39;ENGINE&amp;#39;] = &amp;#39;django.db.backends.postgresql_psycopg2&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# DATABASES[&amp;#39;default&amp;#39;][&amp;#39;NAME&amp;#39;] = &amp;#39;username&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# DATABASES[&amp;#39;default&amp;#39;][&amp;#39;USER&amp;#39;] = &amp;#39;password&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# DATABASES[&amp;#39;default&amp;#39;][&amp;#39;PASSWORD&amp;#39;] = SECRETS[&amp;#39;POSTGRESQL_PASSWORD&amp;#39;]&lt;/span&gt;
&lt;span class="c1"&gt;# DATABASES[&amp;#39;default&amp;#39;][&amp;#39;HOST&amp;#39;] = &amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# DATABASES[&amp;#39;default&amp;#39;][&amp;#39;PORT&amp;#39;] = &amp;#39;5432&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="test-run-you-project-using-prod-settings"&gt;test run you project using prod settings&lt;/h3&gt;&lt;p&gt;For this we will need to use the symlink trickery again.  We are not changing
files or changing imported files we will only change where symlink
is pointing in this instance &lt;code&gt;settings.py -&amp;gt; settings_prod.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;place where manage.py is found&amp;gt;
cd &amp;lt;cool_project&amp;gt;
cd &amp;lt;cool_project&amp;gt;
cd conf
rm settings.py  # let's delete old symlink
ln -s settings_prod.py ./settings.py
cd ../../
python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if all went well you should see:&lt;/p&gt;
&lt;p&gt;&lt;img src="all-went-well.jpg" alt="all-went-well"&gt;&lt;/p&gt;
&lt;p&gt;but since we do not care about our prod settings when developing
let us revert back to &lt;code&gt;settings_test.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;cool_project&amp;gt;
cd conf
rm settings.py  # let us delete old symlink
ln -s settings_test.py ./settings.py
cd ../../
python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="cleanup"&gt;Cleanup&lt;/h2&gt;&lt;p&gt;When we ran &lt;code&gt;python manage.py runserver&lt;/code&gt; for the first time a new db.sqlite3
file was created, this file was created prior to our configuration changes
and it will not be used anymore so let's remove it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm cool_project/db.sqlite3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can make our second git commit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ..
git status
git add .
git commit -m "our second django project commit"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you have a better base for your future Django Projects.&lt;/p&gt;
&lt;h2 id="what-do-i-now"&gt;What Do I Now?&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Create a new Django app in your project: &lt;code&gt;python manage.py &amp;lt;my-super-app&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write awesome code&lt;/li&gt;
&lt;li&gt;If something did not work or you are lazy just copy skeleton we did: &lt;code&gt;git@github.com:dovydasgulbinas/blog-django-skeleton.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tune for a second part, next week, where I will be showing you how
to deploy your project using &lt;strong&gt;fabric2&lt;/strong&gt; and &lt;strong&gt;invoke&lt;/strong&gt; to a production environment.&lt;/li&gt;
&lt;/ol&gt;
</content></entry><entry><title>Introduction to REST authentication</title><link href="https://dovydas.xyz/blog/introduction-on-rest-authentication/" rel="alternate"></link><updated>2018-06-26T00:00:00Z</updated><author><name>D.G.</name></author><id>urn:uuid:4992032d-f916-3e36-925d-dfefe1d7e792</id><content type="html">&lt;p&gt;Recently I had to design REST API endpoints.  My company currently has and old
and hairy monolithic backend.  Like most living things in order to survive they
have to adapt, so did our enterprise backend, it had to talk REST.&lt;/p&gt;
&lt;p&gt;REST in particular is a great approach in design, because it forces you to think
about other people using your REST API.  And like most things the simpler the
thing the less questions you will get.  The messy things began when I started
thinking about authentication and how to implement it.  When I got my feet wet
I come up with various questions like: What is exactly is &lt;strong&gt;Session Based&lt;/strong&gt;
authentication.  Is &lt;strong&gt;Token Based&lt;/strong&gt; authentication better than &lt;strong&gt;Session
Based&lt;/strong&gt; authentication?  What do you mean that &lt;strong&gt;Session Based&lt;/strong&gt; authentication
is stateful and why should i f-ing care?  Oh wait, I can also use OAuth for that?
I hope this blog post will clarify thing or two for someone who was as
lost as I was.&lt;/p&gt;
&lt;h2 id="zen-of-rest"&gt;Zen of REST&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Let's talk HTTP&lt;/li&gt;
&lt;li&gt;Let's use {POST, GET, PUT, DELETE ...}  &lt;/li&gt;
&lt;li&gt;Let's be &lt;strong&gt;stateless&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Let's user URI to organize data we share&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;strong&gt;stateless&lt;/strong&gt; is what really makes REST different from older web
architectures. Ideal stateless server basically will never remember who it gave
a resource to &amp;amp; it will not bother with things such as sessions, compared the
traditional webpages where session based authentication is used.  No cookies and no
sessions, that is the way REST does things. If you are an attentive
reader you probably already understood that &lt;em&gt;Session Based&lt;/em&gt; authentication
breaks core REST principles.&lt;/p&gt;
&lt;p&gt;So if you need to add REST functionality to your old enterprise back-end.
Or you just want to follow the Zen of REST by the letter
prepare to say goodbye to that &lt;code&gt;sessionid&lt;/code&gt; cookie.&lt;/p&gt;
&lt;h2 id="token-based-authentication-tba"&gt;Token Based Authentication (TBA)&lt;/h2&gt;&lt;p&gt;Token based a authentication is one of the most primitive types of authentication (this does not mean it's bad).
It works by using &lt;strong&gt;Tokens&lt;/strong&gt; or more commonly called &lt;strong&gt;API Keys&lt;/strong&gt;. These tokens are simply
a replacement for username/password pair.  The true benefit of using tokens lies in the fact that if someone
steals your token you can simply reissue a new one, unlike with password, because you would
have to change that goddamn thing. Password is the fishing rod, while token is a fish.
In the context of REST for Token Based authentication you will need to implement
an endpoint that will return a new Token, this endpoint will consume your
username/password and spit out a fresh auth token.&lt;/p&gt;
&lt;p&gt;Example of such endpoint would look like:&lt;/p&gt;
&lt;p&gt;request&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST /authenticate/token HTTP/1.1
Host: example.com
Content-Type: application/json

{
  "username": "pepe",
  "password": "animal"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;response&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "Token": "9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b"  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You probably realized, that the endpoint &lt;code&gt;/authenticate/token&lt;/code&gt; must be
available for anyone.  Because "You need a Token to get a Token" is not exactly
going to work.  You probably also have a question where do I put this token exactly?
The answer: to a &lt;strong&gt;HTTP header&lt;/strong&gt;.  Access token e.g. in Django REST framework
would look like &lt;code&gt;Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b&lt;/code&gt;.
One API I used while back would store it like so &lt;code&gt;apikey: 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b&lt;/code&gt;.
There is really no strict consensus therefore you make sure you double check
how it is implemented with frameworks using.&lt;/p&gt;
&lt;p&gt;Cool but why I just can't put these apikeys/tokens in the body of each request?
Well because each method would require different implementation.  GET request would
require an URL parameter e.g. &lt;code&gt;?apikey='9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b'&lt;/code&gt;, while
POST request would require an attribute in the request body: &lt;code&gt;{ "token": "9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b" }&lt;/code&gt;.
Finally it would make REST application &lt;strong&gt;stateful&lt;/strong&gt; because it would have to store These
tokens/apikeys in the database, because POST method creates new entries.&lt;/p&gt;
&lt;div class="admonition admonition-note"&gt;&lt;p&gt;it is not mandatory for you to implement an endpoint for the client
to issue a Token you can simply give it to him manually, assuming only
few people will use your application.&lt;/p&gt;&lt;/div&gt;&lt;h3 id="tba-pros-cons"&gt;TBA Pros &amp;amp; Cons?&lt;/h3&gt;&lt;p&gt;Token based authentication needs username and password.  In some
cases you do not really care. But there are cases when your user data is senstitive
and you don't want third parties handling your users credentials.
e.g. mobile payment API, you want for third parties to create cool looking mobile
app for your clients, but you know that they may be sneaky and steal some private
information from your user.&lt;/p&gt;
&lt;p&gt;Good thing about token based auth is that it can be made &lt;strong&gt;stateless&lt;/strong&gt;.
Further more it is simpler
than other methods.  You just need to add some value to a HTTP request header.
Also you can do API key validation even on the web server e.g 'NGINX' itself.
It can be completely decoupled from the API back-end.&lt;/p&gt;
&lt;p&gt;In summary, use token based auth when you need to fetch and post some
data that is not sensitive.  Basically API keys are good for monitoring and
"pay walling" people who use your API.&lt;/p&gt;
&lt;h2 id="session-based-authentication-sba"&gt;Session Based Authentication (SBA)&lt;/h2&gt;&lt;p&gt;Session is very different compared to &lt;em&gt;Token Based Authentication&lt;/em&gt;.
The ways it differs from Token authentication are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Session tokens are issued &amp;amp; managed by the back-end server&lt;/li&gt;
&lt;li&gt;Session tokens have very short validity time compared to TBA&lt;/li&gt;
&lt;li&gt;Session tokens are stored as cookie.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is how a cookie looks &lt;code&gt;Cookie: sessionid=asbkta702ybw90rd87vphn14kre76s91&lt;/code&gt;
some may argue that, technically &lt;code&gt;Cookie:&lt;/code&gt; is still a part of HTTP header.
Yes but cookies have extra properties compared to plain HTTP headers.
For example your backed API server can set a cookie value on your clients machine
and your browser has a power to remember them.
SBA is great when using web page based applications, but it creates problems when your API
is being used in mobile apps.  This will force the API consumer to use some sort mechanism to
remember those SBA cookies. And also the consumer will have to be sure that these cookies
are set properly.  Another problem you will face when using SBA is that your API will
be vulnerable to CSRF attacks.  The only way to solve this issue,  is to add yet another cookie
to your client's cookie store in Django this cookie is called &lt;strong&gt;csrftoken&lt;/strong&gt;.
Additionally CSRF cookies have to be unique and managed by your API backed as well.&lt;/p&gt;
&lt;p&gt;To summarize SBA is very messy and it isn't designed to be used with REST applications in general.&lt;/p&gt;
&lt;h2 id="oauth-2.0"&gt;OAuth 2.0&lt;/h2&gt;&lt;p&gt;The best and recommended way of authenticating if your API will be used by everyday
users, third parties and your API must handle their username/password then OAuth is a must have.&lt;/p&gt;
&lt;p&gt;Like TBA OAuth also uses tokens to manage access to resources.  Another
benefit of OAuth 2.0 is ability to give tokens permissions.  For example this
token grants this application ability to read users messages, but not create them.&lt;/p&gt;
&lt;p&gt;OAuth 2.0 describes four ways of &lt;strong&gt;Authorization Grants (AG)&lt;/strong&gt; defined by &lt;a href="https://tools.ietf.org/html/rfc6749"&gt;RFC6749&lt;/a&gt;.
RFC6749 also introduces 4 important terms that you must know. &lt;strong&gt;Resource Owner (RO)&lt;/strong&gt; - someone who's data is kept
on a server  &lt;strong&gt;Resource Server (RS)&lt;/strong&gt; -- server that keeps &lt;em&gt;Resource Owner's&lt;/em&gt; data.  &lt;strong&gt;Client (CL)&lt;/strong&gt; - a piece of software
that communicates with a &lt;em&gt;Resource Server&lt;/em&gt; on behalf of the &lt;em&gt;Resource Owner&lt;/em&gt;. &lt;strong&gt;Authorization Server (AS)&lt;/strong&gt; - server that
manages OAuth 2.0 tokens and verifies that &lt;em&gt;Resource Owner's&lt;/em&gt; credentials are correct.&lt;/p&gt;
&lt;h3 id="authorization-code-ac"&gt;Authorization Code (AC)&lt;/h3&gt;&lt;p&gt;This method is a commonly used method in OAuth.  If you ever used any of Google'
apps you we're definitely prompted with enter your Google username and password.
The form that you enter your password in was issued by Google's AS.
In most cases this form will be a webpage presented to you as an iFrame.
This way of authentication is great because, the CL never gets RO credentials.
Instead of credentials CL will receive a  "Authorization code". This authorization
code is not an access token.  Instead it a code that can generate multiple
access tokens during the use of the applications. AC in it self is only
used to get access tokens this means you can't use AC
to access RO's data directly.&lt;/p&gt;
&lt;p&gt;One thing to note though it may
be annoying to enter password to every single Google app you have downloaded
knowing that you have all ready logged in on some Google apps.  This is not
a big deal if a user will use on of your CO will use multiple Apps to Access
it's resources you may need to reconsider other &lt;em&gt;authorization grant&lt;/em&gt; methods./&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CL does a request to AS and sends his &lt;code&gt;client_id&lt;/code&gt; + &lt;code&gt;redirect_uri&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;AS renders RO form, this form contains a login or authorization message.
RO enters its credentials or authorizes the CL.&lt;/li&gt;
&lt;li&gt;AS returns an AC using a browser based redirect to the CL. The AC is returned as an URL parameter a &lt;strong&gt;Redirect URI (RURI)&lt;/strong&gt;. But since we can't do much with AC we have to introduce one extra step.&lt;/li&gt;
&lt;li&gt;CL uses &lt;em&gt;Authorization Code&lt;/em&gt; to fetch &lt;strong&gt;Access Token (AT)&lt;/strong&gt; &amp;amp; &lt;strong&gt;Refresh Token (RT)&lt;/strong&gt;.  &lt;em&gt;This step is done in the background&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;CL uses AT he just got to fetch data from RS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="ac-oauth.png" alt="ac-oauth"&gt;&lt;/p&gt;
&lt;p&gt;It is important to note there may not be any redirect to &lt;code&gt;example.com/authorize&lt;/code&gt;, because
the AS has already defined a specific URL that is used for AC authorization.
Also the RFC standard does define nor stop you from having an endpoint that redirects
to &lt;code&gt;/authorize&lt;/code&gt;.  Just remember that your AC-OAuth must have a authorization endpoint&lt;/p&gt;
&lt;h3 id="implicit-im-https//tools-ietf-org/html/rfc6749"&gt;&lt;a href="https://tools.ietf.org/html/rfc6749"&gt;Implicit (IM)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Implicit authorization is a type of authorization you would want to use in a web app
that has no back-end e.g JavaScript application. Since the web browsers stores &lt;strong&gt;cookies&lt;/strong&gt;
for a specific website you can't really save AC's and RT's because every new app your
user used would require a new pair AC's and RT's.  You may ask so what? I do not
mind that a user has to authorize with RS every single time it is not my problem
that he decided to use apps other than my own.  It is stupid to think this way
for a one reason: &lt;em&gt;It is better to minimize number of times RO has to
enter a password, because the probability of password being compromised increases.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;RFC6749 documentation introduces a term &lt;strong&gt;user-agent&lt;/strong&gt; a.k.a a web browser.
Also RFC6749 is being very &lt;em&gt;implicit&lt;/em&gt; (pun intended) when it comes to explaining.
What is the role of browser is.  In reality browser has to support three features:
cookies, redirects &amp;amp; JavaScript.  If the conditions are not met your users are
probably using "lynx" or "w3m".&lt;/p&gt;
&lt;p&gt;The figure below assumes that the user has already logged in to example.com domain.
This is why the figure in &lt;a href="https://tools.ietf.org/html/rfc6749"&gt;RFC6749&lt;/a&gt; has more steps than I present.&lt;/p&gt;
&lt;p&gt;&lt;img src="im-oauth.png" alt="im-oauth"&gt;&lt;/p&gt;
&lt;p&gt;This is big sequence diagram, the most important part in it are the two redirects
happening: &lt;strong&gt;1. CL-&amp;gt;UA-&amp;gt;AS&lt;/strong&gt; and &lt;strong&gt;2. CL&amp;lt;-UA&amp;lt;-AS&lt;/strong&gt;.
In a real world application when doing &lt;strong&gt;1.CL-&amp;gt;UA-&amp;gt;AS&lt;/strong&gt; you would form an URL
like this &lt;code&gt;/authorize?client_id=777&amp;amp;redirect_uri=my-site.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;client_id&lt;/code&gt;
:  parameter
helps AS to identify which CL is doing a request, since AS is the one issuing this client_id.
In theory client_id could be optional, but must of OAuth based frameworks
I have used make it mandatory.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redirect_uri&lt;/code&gt;
: parameter instructs the AS to where the user should be redirected. When redirected
the CL (javascript) will get few more goodies because AS will attach a juicy Token.&lt;/p&gt;
&lt;h2 id=""&gt; &lt;/h2&gt;&lt;h3 id="im-summary"&gt;IM summary&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Implicit authorization needs &lt;code&gt;sessionid&lt;/code&gt; cookie set for the domain in which AS is running.
if cookie is not present then user will be prompted to login. And then the cookie will be set&lt;/li&gt;
&lt;li&gt;Implicit authorization would not work without a client client-agent (browser).
because you need a way to handle the HTTP redirects.&lt;/li&gt;
&lt;li&gt;Auth Tokens are passed as URL parameters&lt;/li&gt;
&lt;li&gt;There is no way how to renew an Auth Token. This means that Tokens will have
to be renewed by the user when they expire.&lt;/li&gt;
&lt;li&gt;Tokens must to be stored in browser &lt;em&gt;LocalStorage&lt;/em&gt; or &lt;em&gt;Cookies&lt;/em&gt; for further use.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resource-owner-password-credentials-ropc"&gt;Resource Owner Password Credentials (ROPC)&lt;/h3&gt;&lt;p&gt;This type of authorization should be used rarely.  And avoided most of the time
since RO credentials are given directly to the CL. CL will use username/password
of the RO to get an Access Token.  This feature should never be enabled
for third party developers, because they may steal your RO username/password.
Only case it is okay to use when you are building your own operating system, e.g.
Android phones in their &lt;strong&gt;Settings&lt;/strong&gt; page have an &lt;strong&gt;Accounts&lt;/strong&gt; section in which user
enters his Google username/password.  Since these credentials are stored in the
system itself and no other apps have access to these credentials it is okay.
In theory ROPC should only require username/password once, because during
the authorization with AS, CL is allowed to receive a &lt;strong&gt;Authorization Token + Refresh Token&lt;/strong&gt;
Refresh Token will allow the CL to renew Authorization Token when the initial one expires.
So the best practice would be to embed a mechanism that would prevent CL from
storing username/password on the device all together.&lt;/p&gt;
&lt;p&gt;&lt;img src="ropcg-oauth.png" alt="ropcg-oauth"&gt;&lt;/p&gt;
&lt;h3 id="client-credentials-cc"&gt;Client Credentials (CC)&lt;/h3&gt;&lt;p&gt;The final and most basic way of authenticating. CC architecture has only two components (in authorization process)
client (CL) and authorization server (AS).  In this case RO is the CL.  For example if you
want to get Authorization Token for yourself you could do that using &lt;a href="https://en.wikipedia.org/wiki/CURL"&gt;curl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="cc-oauth.png" alt="cc-oauth"&gt;&lt;/p&gt;
&lt;h4 id="usage"&gt;usage&lt;/h4&gt;&lt;p&gt;Use Client Credentials when you are developing or testing your OAuth apps. Or
if you are a &lt;a href="https://en.wikipedia.org/wiki/Text-based_user_interface"&gt;TUI&lt;/a&gt; person feel free to authorize all apps this way 😉&lt;/p&gt;
&lt;h2 id="general-summary"&gt;General Summary&lt;/h2&gt;&lt;p&gt;OAuth 2.0:&lt;/p&gt;
&lt;p&gt;As I show in this blogpost there are more than ways how to &lt;em&gt;"skin the cat called auth"&lt;/em&gt;.
But if your REST API will be used by everyday people should go with OAuth 2.0.
OAuth 2.0 as a standard covers multiple cases you will encounter plus nowadays
it became an industry standard.&lt;/p&gt;
&lt;p&gt;Token Based Authentication (TBA):&lt;/p&gt;
&lt;p&gt;If you want to expose your API as SaS then in most cases Token Based Authentication (TBA)
covered in the first chapter should be sufficient.  Because there is a high likely hood
that consumer of your API will be another machine, not a person.  And as we know
machines tend not to forget their passwords or Tokens.&lt;/p&gt;
&lt;p&gt;Session Based Authentication (SBA)&lt;/p&gt;
&lt;p&gt;If your only plan in life is to make a single web app in life, you can go with
SBA. SBA is actually an old way of doing things, because all non-REST web applications
rely on sessions.  Further more session based authentication can become a pain
in the ass to implement on a mobile app, because you would have to manage session
cookies manually.  It was designed for use in webpages and should remain to be used with them.&lt;/p&gt;
&lt;p&gt;This post does not cover all intricacies of authorization but I hope it gave you a good
head start. I highly recommend to skim through developer docs written by &lt;a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/"&gt;Spotify&lt;/a&gt;
and the &lt;a href="https://tools.ietf.org/html/rfc6749"&gt;RFC6749&lt;/a&gt; I mentioned before.&lt;/p&gt;
&lt;h2 id="glossary"&gt;Glossary&lt;/h2&gt;&lt;p&gt;HTTP Header
:  All data found in the HTTP request that starts after very first &lt;code&gt;\n&lt;/code&gt;
and end at the boundries of two &lt;code&gt;\n\n&lt;/code&gt;  characters.  HTTP headers usually look
similar to this example: &lt;code&gt;User-Agent: XBMC Addon Radio&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;REST
: REpresentational State Transfer.&lt;/p&gt;
&lt;p&gt;CSRF
: Cross site request forgery.  A type of an attack in which user's existing
session cookie can be used by unauthorized attacker.&lt;/p&gt;
&lt;p&gt;Redirect URI (RURI)
: An endpoint in client application that accepts Access Tokens OR Authorization Codes.
Imporant part in RURIs are their URL parameters.  eg. &lt;a href="https://dovydas.xyz/?**acces_token=12345**"&gt;https://dovydas.xyz/?**acces_token=12345**&lt;/a&gt;.
In order to receive and &lt;code&gt;access_token&lt;/code&gt; your Client must have an endpoint enabled and listen
on that URL in order to receive that code.  If you are using mobile apps and need
to fetch URL parameters this can be done not by listening on a specific endpoint
but rather tracking the URLs app user is navigating in the build it browser.&lt;/p&gt;
&lt;p&gt;User-Agent
: A Fancy term for a web browser or a client that can do HTTP requests.&lt;/p&gt;
&lt;p&gt;API Key
:  Synonymous with &lt;strong&gt;Token Based Authentication&lt;/strong&gt; is a string that Authorizes
a client (API Consumer) to access endpoints that require authorization.&lt;/p&gt;
&lt;p&gt;Consumer, API Consumer
:  A person who is using or implementing the API in some web or mobile app.&lt;/p&gt;
&lt;p&gt;Access Token (AT), Authorization Token (AT)
:  Are used interchangeably in this blog post.  They are strings that allow a client
to do requests on behalf of a user.&lt;/p&gt;
&lt;p&gt;Resource Owner (RO), User
:  someone who’s data is kept on a server&lt;/p&gt;
&lt;p&gt;Resource Server (RS)
:  server that keeps Resource Owner’s data.&lt;/p&gt;
&lt;p&gt;Client (CL)
:  a piece of software that communicates with a Resource Server on behalf of the Resource Owner.&lt;/p&gt;
&lt;p&gt;Authorization Server (AS)
:  server that manages OAuth 2.0 tokens and verifies that &lt;em&gt;Resource Owner's&lt;/em&gt; credentials are correct.&lt;/p&gt;
</content></entry><entry><title>Modify Android Phone To Run Without a Battery</title><link href="https://dovydas.xyz/blog/modify-android-phone-to-run-without-a-battery/" rel="alternate"></link><updated>2018-06-03T00:00:00Z</updated><author><name></name></author><id>urn:uuid:dbb39112-b385-3e82-bbe8-8a94dcee4100</id><content type="html">&lt;p&gt;I had few use cases where I needed a constantly on Android phone.
The issue with keeping any device constantly charging is that their battery will suffer.
In case of lithium-ion batteries, they have a proclivity to inflate and even catch fire or even explode.
So keeping your mobile phone charging all the time is a NO.&lt;/p&gt;
&lt;p&gt;Luckily, there is a way to solve that issue by ripping out the battery and adding
an external power source instead of the battery, but even this may not be so
easy since more and more entry level phones have a built-in a hard to replace
battery, so you really have to find a right phone.
I tried this mod on several phones &lt;a href="https://www.gsmarena.com/lg_g4c-7250.php"&gt;LG&lt;/a&gt; (with removable battery), Samsung (With removable battery), &lt;a href="https://www.gsmarena.com/motorola_nexus_6-6604.php"&gt;Nexus 6&lt;/a&gt;
(with embedded battery).&lt;/p&gt;
&lt;p&gt;The results were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LG (with removable battery): boots up and works for few minutes after that magic battery &lt;a href="https://android.stackexchange.com/questions/27277/why-my-phone-battery-has-four-terminal-what-is-the-use-of-the-fourth"&gt;DRM&lt;/a&gt; kicks in
and shuts down the phone.  So don't bother with LG phones&lt;/li&gt;
&lt;li&gt;Nexus 6 (with embedded battery): Fried that sucker.  The power pins were tiny, so don't bother also.&lt;/li&gt;
&lt;li&gt;Samsung (with removable battery): Worked like a charm I actually managed to
hack 2 different models of Samsung phones, both with a removable battery:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gsmarena.com/samsung_galaxy_xcover_4-8577.php"&gt;XCover 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gsmarena.com/samsung_galaxy_s5_neo-6506.php"&gt;Galaxy S5 Neo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So this post will cover my journey of hacking a &lt;a href="https://www.gsmarena.com/samsung_galaxy_xcover_4-8577.php"&gt;Samsung XCover 4&lt;/a&gt; to
run w/out a battery.&lt;/p&gt;
&lt;h2 id="the-guide"&gt;The Guide&lt;/h2&gt;&lt;p&gt;The schematics are relatively simple.  I used a 5V, 2A AC/DC power adapter.
You may say, ask why I did not reuse the original charger?&lt;/p&gt;
&lt;p&gt;Well, the original charger had 2 issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The output voltage was rated &lt;code&gt;5.2 V&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Also, the output current was only &lt;code&gt;1 A&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the phone gets some heavy load e.g. a video game, it may start shutting down or
the battery level may drop below a 100%, and we don't want that let's  just tell
the phone the battery is at 100% all the time.
The battery % may fall because the charger's voltage begins to fall sharply if high current is required by the device that's why I chose to buy a &lt;code&gt;5 V, 2 A&lt;/code&gt; adapter and not use the original
charger.&lt;/p&gt;
&lt;p&gt;Now you may ask but won't &lt;code&gt;5V&lt;/code&gt; directly to the battery pins damage the phone?
Since li-ion batteries are usually rated &lt;code&gt;@3.7 V&lt;/code&gt;, yes 5V directly may damage the
phone's electronics inside, so I dropped the voltage using a single component
since I wanted for the circuit to be as simple as possible.  I just used a high
current &lt;code&gt;FUF5408&lt;/code&gt; diode.  You should keep in mind that diodes don't drop voltage
at a fixed point, they also have some Volt-ampere characteristics (i.e. voltage drop across the diode based on passing current).&lt;/p&gt;
&lt;p&gt;Here is the original schematics:&lt;/p&gt;
&lt;p&gt;&lt;img src="schematics.jpg" alt="schematics"&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;R_1 = 12k Ω, 0.25 W Resistor
D_1 = FUF5408, High Power Diode

[NFC] -- Not used
[-] -- Negative (-) power rail duh
[S] -- Thermal resistor pin, originaly thermal resistor is built into the battery.
[+] -- (+)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here is how the module looks like when soldered&lt;/p&gt;
&lt;p&gt;&lt;img src="sk-module.jpg" alt="sk-module"&gt;&lt;/p&gt;
&lt;p&gt;As you can see, module uses 4 pins, well actually only 3 of them since the left
most pin is used for NFC data.  Yes, Samsung batteries have NFC antennas glued on
the batteries and not build it into the phone, since I did not really need the
NFC I did not bother connecting it.  Also, as mentioned before &lt;strong&gt;thermal
resistors&lt;/strong&gt; are also a part of the battery, that's why we used 12k Ω resistor,
because we need to fool the phone into believing that battery temperature is OK.&lt;/p&gt;
&lt;p&gt;&lt;img src="sk-module2.jpg" alt="sk-module2"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="sk-module-back.jpg" alt="module back"&gt;&lt;/p&gt;
&lt;p&gt;For the soldered module, I used a simple breakout board.
Fun fact Samsung battery pins are spaced in the good old INLINE manner meaning
that the distance between the centers of adjacent pins is equal to &lt;code&gt;1"/10 = 2.54 mm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="sk-module-wire.jpg" alt="module-wire"&gt;&lt;/p&gt;
&lt;p&gt;If you are attentive enough, you probably noticed that the top part of breakout
holes are cut in half having a &lt;code&gt;U&lt;/code&gt; shape and not plain &lt;code&gt;O&lt;/code&gt; hole shape.  This was
intentional, because I wrapped the contact pins w/ one striped wire from the
CAT-5 cable.&lt;/p&gt;
&lt;p&gt;&lt;img src="sk-product.jpg" alt="product"&gt;&lt;/p&gt;
&lt;p&gt;And here is how the finished hack looks like.  I simply used hot-glue to keep the
module in place also make sure you hot glue the wires as well so that under
tension, they don't transfer any "wobbliness" to the module itself.&lt;/p&gt;
&lt;h2 id="final-thoughts"&gt;Final Thoughts&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;This "no battery" method worked quite well for me and proved not to cause any issues&lt;/li&gt;
&lt;li&gt;The work and components involved are readily available and easy to put together&lt;/li&gt;
&lt;li&gt;NFC can be added if needed, you simply would need to peel off the NFC tag from
the original battery.&lt;/li&gt;
&lt;li&gt;Phone, in this configuration, can be used as a cheap IP camera using &lt;a href="https://play.google.com/store/apps/details?id=com.pas.webcam"&gt;IP Webcam app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you are paranoid about the voltage levels of your "no battery" mod you can use the &lt;a href="https://f-droid.org/en/packages/com.darshancomputing.BatteryIndicator/"&gt;BatteryBot&lt;/a&gt; to check some battery stats.&lt;/li&gt;
&lt;li&gt;I would only bother w/ Samsung phones &amp;amp; only phone w/ removable batteries because from my experience it is guaranteed to work and easiest to mod way.&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Issuing and managing client-side SSL certificates with Python</title><link href="https://dovydas.xyz/blog/issuing-and-managing-client-side-ssl-certificates-with-python/" rel="alternate"></link><updated>2018-02-02T00:00:00Z</updated><author><name></name></author><id>urn:uuid:c2ffd69e-0fad-3337-8a5d-b1b4305d535e</id><content type="html">&lt;p&gt;&lt;img src="using-client-side-certification.png" alt="start"&gt;&lt;/p&gt;
&lt;h2 id="abbreviations"&gt;Abbreviations&lt;/h2&gt;&lt;p&gt;Key
:  A piece of cryptographic information used for encrypting data by a chosen algorithm.&lt;/p&gt;
&lt;p&gt;Hypertext Transfer Protocol Secure (HTTPS)&lt;/p&gt;
&lt;p&gt;Certificate Signing Request (CSR)
:  A process in which person or server asks for his
key being signed. Thus allowing others you verify the &lt;strong&gt;key&lt;/strong&gt; belongs to them.&lt;/p&gt;
&lt;p&gt;Certificate Authority (CA)
:  A person or a server that is trusted and signs
your certificates requests.&lt;/p&gt;
&lt;p&gt;Client Side Certificate (CSC)
:  A file given to a user to prove its identity
it usually comes in p12 format and is installed into web browsers. CSC are obtained
usually by sending a CSR to a CA.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Our company has decided to make some of their webpages publicly accessible, but we did not want for &lt;em&gt;anyone&lt;/em&gt; to see the actual content of our website.
In other words we simply wanted to have a webpage that could only be accessed by our employees.&lt;/p&gt;
&lt;p&gt;So we ended up using client side certificates CSC. CSC have been around for relatively long time but until today it yet seems to be not very popular.
Use of client side certificates is very useful because you can identify users
who want to access your website.  It also can be used as good alternative for username and password.
Because CSC as mentioned previously helps to uniquely identify user who is connecting to your server.&lt;/p&gt;
&lt;h2 id="how-csc-are-generated"&gt;How CSC are generated&lt;/h2&gt;&lt;p&gt;As you know SSL in general is not as trivial.
Maybe that is the reason why CSC are not used as often.
But I will try to explain using this table below. To make things less
convoluted this example contains &lt;strong&gt;one&lt;/strong&gt; certificate authority.
In reality, you will probably have two of them.
Why? Because one is used to issue a valid HTTPS certificate
for your &lt;strong&gt;webpage&lt;/strong&gt;.
Even-though you can always use self-signed certificates both for
&lt;strong&gt;webpage&lt;/strong&gt; and for a &lt;strong&gt;client&lt;/strong&gt; (that connect to the website) I do not recommend that because, clients will have to go through screen like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://ohmag.net/wp-content/uploads/2016/06/33-cert-7.png" alt="unknown certificate authority"&gt;&lt;/p&gt;
&lt;p&gt;But you probably know that already.  And yes you can force your users
to install your home brew CA into their root certificate store this will only
make things harder for you, because you will only confuse simple users even more.&lt;/p&gt;
&lt;h2 id="certificate-issuing-in-detail"&gt;Certificate Issuing in Detail&lt;/h2&gt;&lt;p&gt;NOTE: follow the enumeration.&lt;/p&gt;
&lt;p&gt;This example assumes you will be your own CA (a.k.a. Your connection is not secure)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th style="text-align:center"&gt;kitty Certificate Authority (CA) 🔏&lt;/th&gt;
&lt;th style="text-align:center"&gt;picture-server 🗄&lt;/th&gt;
&lt;th style="text-align:center"&gt;eager-client 💻&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;1. Generates private key for him self &lt;strong&gt;kitty-ca.key&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;2. Signs his own private key, thus becomes &lt;em&gt;CA&lt;/em&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;3. Step 2. Yields a new file called a certificate: &lt;strong&gt;kitty-ca.crt&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;4. Server, generates private key for itself &lt;strong&gt;picture-server.key&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;5. Server wants to prove that his key belongs to him therefore he creates a &lt;code&gt;certificate signing request&lt;/code&gt; file&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;6. File generated in step 5. Is made from servers private key and looks like this: &lt;strong&gt;picture-server.csr&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;7. Server sends his file to CA&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;8. kitty-ca accepts sent file and generates a certificate for Server: &lt;strong&gt;picture-server.crt&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;9. Picture-server takes the new &lt;strong&gt;picture-server.crt&lt;/strong&gt; file and adds it to its Apache or nginx configuration&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;10. Picture-server is ready to prove his identity to client and serve encrypted pictures 🔐&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;11. Eager-client want, for his pictures not to be available publicly. He wants client-side-authentication (CSA)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;12. For &lt;em&gt;CSA&lt;/em&gt; eager-client has multiple options:   12.1 Generate &lt;em&gt;private&lt;/em&gt; key for himself &lt;strong&gt;eager-client.key&lt;/strong&gt;   12.2 eager-client, needs to prove that his key belongs to him therefore he creates a &lt;code&gt;certificate signing request&lt;/code&gt;file   12.3 He sends that file to kitty-ca&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;13. kitty-ca accepts sent file and generates a certificate for eager-client: &lt;strong&gt;eager-client.crt&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;14. Eager-client converts &lt;strong&gt;eager-client.crt&lt;/strong&gt; to the new &lt;strong&gt;eager-client.p12&lt;/strong&gt; file and add it to its Firefox, Chrome browsers or adds it to his keychain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;15. Eager-client connects to picture-server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;16. Picture-server trusts kitty-ca issued files &lt;strong&gt;eager-client.p12&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;/td&gt;
&lt;td style="text-align:center"&gt;17. Picture-server serves eager-client a webpage full of pictures to an eager-client.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="translating-to-openssl-commands"&gt;Translating To OpenSSL commands&lt;/h3&gt;&lt;p&gt;Python uses OpenSSL under the hood this means that all Python calls are just wrapped OpenSSL CLI calls, so for simplicity first table above will be dissected and OpenSSL CLI calls and later in Python code.&lt;/p&gt;
&lt;p&gt;Step 1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  openssl genrsa -out kitty-ca.key 4096
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Steps from  2 to 3.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  openssl req -config openssl.cnf \
  -key kitty-ca.key -new -x509 -days 7300 \
  -sha256 -extensions v3_ca -out kitty-ca.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 4.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  openssl genrsa -out picture-server.key 2048
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Steps from 5 to 6.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  openssl req -config openssl.cnf -new -sha256 \
  -key picture-server.key \
  -out picture-server.csr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 8.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  openssl ca -config openssl.cnf \
        -days 375 -notext -md sha256 \
        -in picture-server.csr \
        -out picture-server.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 12.1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  openssl genrsa -out eager-client.key 2048
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 12.2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  openssl req -config openssl.cnf -new -sha256 \
  -key eager-client.key \
  -out easger-client.csr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 13. (The actual client side generation part)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  openssl ca -config openssl.conf -notext -md sha256 \
  -in eager-client.csr \
  -out eager-client.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 14. (Conversion from crt → p12)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  openssl pkcs12 -export \
  -inkey eager-client.key \
  -in eager-client.crt \
  -out eager-client.p12
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;By now you should have noticed that what was done is just the same thing three times:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;generate certificate for &lt;em&gt;kitty-ca&lt;/em&gt; (signs his own certificate)&lt;/li&gt;
&lt;li&gt;generate certificate for &lt;em&gt;picture-server&lt;/em&gt; (kitty-ca signs picture-server's certificate)&lt;/li&gt;
&lt;li&gt;generate certificate for &lt;em&gt;eager-client&lt;/em&gt; (kitty-ca signs eager-client's certificate)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In reality eager-client's  and picture-server's certificates can be signed by two different
Certificate Authorities (CAs) and they will still be able to trust each other.
Because client side and server side authentication are not dependent on each other is any way (this example only made it that way).
You could even have only client-side certification without HTTPS enabled on your server, and it would still work (client would still be authenticated).&lt;/p&gt;
&lt;h2 id="python-script-for-certificate-generation"&gt;Python Script for Certificate Generation&lt;/h2&gt;&lt;p&gt;For running this code on your machine I highly recommend you to install
&lt;a href="https://conda.io/miniconda.html"&gt;Miniconda&lt;/a&gt; this will simplify your installation tremendously since pip, OpenSSL,
virtualenv are bundled with Miniconda out of the box.&lt;/p&gt;
&lt;p&gt;Once you installed you Miniconda. &lt;strong&gt;Restart your terminal app&lt;/strong&gt; And run the Python
script provided below in the gist.&lt;/p&gt;
&lt;p&gt;This gist below contains everything you need to Issue your client a certificate
and revoke it:&lt;/p&gt;
&lt;script src="https://gist.github.com/dovydasgulbinas/13af9e0d0321fcfc0c787aaed4a86888.js"&gt;&lt;/script&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;I hope you got a better grasp on HTTPS in general. One thing you should remember
is that In client-side setup everyone has to have their own private key and their
certificate, because certificates are objects that prove your identity.  Not your
private keys. Also, private keys do not age meaning you can as for as many certificates
you like with the same private key.  The only thing that ages is your certificates.&lt;/p&gt;
&lt;p&gt;In general all HTTPS initiative can be summarized in 3 simple steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create your private key&lt;/li&gt;
&lt;li&gt;Create a signing request for your key&lt;/li&gt;
&lt;li&gt;Get a certificate and prove you identity with it&lt;/li&gt;
&lt;/ol&gt;
</content></entry><entry><title>Control anything SSH with Homeassistant's Hass.io</title><link href="https://dovydas.xyz/blog/control-anything-ssh-with-homeassistants-hassio/" rel="alternate"></link><updated>2018-01-22T00:00:00Z</updated><author><name></name></author><id>urn:uuid:02f7fb01-cc5e-3b76-906b-821278f87046</id><content type="html">&lt;h2 id="what-is-ssh"&gt;What is SSH?&lt;/h2&gt;&lt;p&gt;SSH is a powerful command line-tool, allowing for you to connect to a remote machine and issue any shell command remotely.
Basically, SSH is a way of &lt;strong&gt;sending&lt;/strong&gt; a command to a remote machine without doing the typing in by sitting front of the computer yourself.
This means you can do things like shutdowns, maintenance, updates or anything else you want with SSH (as long as you
have the username and the password of that particular server).
A good example would be shutting down a remote server using this SSH command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh donald@192.168.1.2 'sudo reboot'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will effectively restart a machine with IP &lt;code&gt;192.168.1.2&lt;/code&gt; machine.
Cool, but how do you do that using Homeassistant? By using the &lt;a href="https://home-assistant.io/components/switch.command_line/" title="Homeassistant command line component"&gt;&lt;code&gt;command_line&lt;/code&gt;&lt;/a&gt; component.
This is all fine and dandy, but if you tried to connect to &lt;code&gt;donald&lt;/code&gt; using this command you probably noticed that you needed a password for that.
And now you have probably realized that you will not be able to put your password to the &lt;code&gt;command_line&lt;/code&gt; component, since password request interactive.
Luckily for, you can do SSH commands without entering any passwords and yet still be safe at the same time.
For this feat, you will need a &lt;strong&gt;public/private&lt;/strong&gt; key pair that will be used to connect to your remote machine without any passwords.&lt;/p&gt;
&lt;p&gt;After my migration from Hassbian to Hass.io, I ran into an issue.
The issue was that I could not send proper SSH commands to a computer running &lt;a href="https://hyperion-project.org/" title="Hyperion Project site"&gt;Hyperion&lt;/a&gt;.
These issues with SSH were in fact caused by the concept of Docker isolation.
This means that my Homeassistant's instance was completely separated from my host machine, thus not allowing me to run executables such as SSH and others.
Luckily official Homeassistant Docker image has SSH client installed to the container so this mean that you can call SSH commands, but yet again there is a catch.
Can you guess what is that catch?
As mentioned before, we need to authenticate ourselves using a password OR public/private key pair.
So let us begin by making a public/private key pair.&lt;/p&gt;
&lt;h2 id="generating-the-ssh-keys"&gt;Generating the SSH Keys&lt;/h2&gt;&lt;p&gt;In reality, we need to generate ssh keys both on the &lt;strong&gt;FROM&lt;/strong&gt; machine and the
&lt;strong&gt;TO&lt;/strong&gt; machine. Because this is the only way (in SSH) for BOTH machines can prove their
identity to each other. In this tutorial, a machine that we issue commands FROM will be
called the MASTER &amp;amp; the machine and the machine executing commands SLAVE in our
case MASTER is the machine running HASS.io instance.&lt;/p&gt;
&lt;h2 id="the-guide"&gt;The Guide&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;prerequisites:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSH connection to your &lt;a href="https://home-assistant.io/developers/hassio/debugging/" title="Connect Hassio host"&gt;Hass.io ResinOS host&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this tutorial we will make button in Homeassistant that when pressed will shut down our SLAVE server via SSH.
Basically it will append a text file every time we press a button.
This example will be a good starting point for controlling remote devices.&lt;/p&gt;
&lt;p&gt;In my case, IP addresses were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MASTER IP &lt;strong&gt;192.168.0.105&lt;/strong&gt; and SSH port &lt;strong&gt;22222&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SLAVE IP: &lt;strong&gt;192.168.0.111&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="make-ssh-keys-both-on-master-and-the-slave"&gt;Make SSH keys both on MASTER and the SLAVE&lt;/h2&gt;&lt;p&gt;Generate SSH keys on HASS.io Homeassistant docker container&lt;/p&gt;
&lt;h2 id="set-up-master"&gt;Set up MASTER:&lt;/h2&gt;&lt;p&gt;Connect to the MASTER. This will not work "out of the box" so first follow
&lt;a href="https://home-assistant.io/developers/hassio/debugging/" title="Connect Hassio host"&gt;official tutorial&lt;/a&gt; on how to connect to the HASS.io host running ResinOS.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh root@192.168.0.105 -p 22222
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now attach to the Homeassistant docker container.
List available docker containers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Find one looking something like &lt;code&gt;homeassistant/homeassistant3&lt;/code&gt;.
Copy its CONTAINER ID looking something like &lt;code&gt;b7dfc2f4d0c4&lt;/code&gt;.
Then attach to your container,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it b7dfc2f4d0c4 /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now finally generate your SSH key, but this time in a different directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir /config/ssh
ssh-keygen -t rsa -f /config/ssh/id_rsa  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;checkout two brand-new PUBLIC &amp;amp; PRIVATE keys&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /config/ssh
ls -al
cat id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if all went well you &lt;strong&gt;public key&lt;/strong&gt; output should look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDyiprxeHAAieq2YtiXhFgSQIhZwvY6zsPAhsNU/N6yJ+JptVJGWBNY0tAD4eQiSsl88Qe4ryWVmtnw83jUjDMZp24uRtEAPnPW3f9N8mbDnyCEtbYhIDn1KseL3SuRWyFzk0fcMExZfsXrxgZ5nD/yQKvjcHm52LrhDfauxYADItonBZA+6mXh0E1LBrk6gP884IpLLbT9xetW2ZLP6htJDTPc2k9qN1cRVj3DD5Ppfyct1FmfZcAyi3Ua2dPxzngI5RUsjLBaqP+3lluc7fJVYK7fhnGZ36E/JNEamlzktBuLG1+1G3wxCshMFFBBuLTHb7qhtueIBY/4+wduJlFD root@hassio
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="admonition admonition-note"&gt;&lt;p&gt;Copy this value, it is your PUBLIC key we will use later!&lt;/p&gt;&lt;/div&gt;&lt;h2 id="set-up-slave"&gt;Set up SLAVE:&lt;/h2&gt;&lt;p&gt;For testing purposes, lets create a user called &lt;code&gt;mister.slave&lt;/code&gt;
connect to your SLAVE machine&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh myUser@192.168.0.111
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add a user called &lt;code&gt;mister.slave&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo useradd mister.slave sudo
sudo passwd mister.slave
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This step may differ because Unix based distros use different commands for enabling sudo on your user in my case (Debian 9)
I just had to write &lt;strong&gt;sudo&lt;/strong&gt; when creating a new &lt;code&gt;mister.slave&lt;/code&gt; user.&lt;/p&gt;
&lt;p&gt;This will require a password to write something memorable.
We will delete this user later anyway.
After creating a &lt;code&gt;mister.slave&lt;/code&gt; switch to it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo su mister.slave
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that you became &lt;code&gt;mister.slave&lt;/code&gt; user lets &lt;strong&gt;finally&lt;/strong&gt; make our SSH key pair&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay we have our keys setup but what about passwordless connection from MASTER?
Its easy we have to add the &lt;strong&gt;public key&lt;/strong&gt; we copied before to our SLAVE machines'
&lt;code&gt;authorized_keys&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo "PASTE YOUR MASTER KEY INSTEAD OF THIS TEXT" &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On some systems &lt;code&gt;authorized_keys&lt;/code&gt; file must have specific Unix permissions set
, and it will fail silently if you do not add these permissions so let's do that.
Line below will only make the file readable and writable to our user.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod 600 ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay our connection should be good to go. So what we just did is we created an SSH key pair on
both MASTER and the SLAVE machines &amp;amp; we installed MASTERS &lt;strong&gt;public key&lt;/strong&gt; onto SLAVE. Now the
SLAVE trusts the MASTER machine and allows it to connect without a password.&lt;/p&gt;
&lt;p&gt;You will probably be interested in running some commands with &lt;strong&gt;sudo&lt;/strong&gt; without a password. For this
we will need to add these lines to &lt;code&gt;/etc/sudoers&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="admonition admonition-warning"&gt;&lt;p&gt;You should be very careful when editing &lt;code&gt;/etc/sudoers&lt;/code&gt; file, one bad character could lock you out
from the system forever!&lt;/p&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;sudo visudo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;visudo&lt;/code&gt; uses vim text editor it will require you to know some commands. Do not worry I will denote editor command like this: &lt;code&gt;[[ ]]&lt;/code&gt;. Everything in the &lt;code&gt;[[ ]]&lt;/code&gt; are editor
commands that you will have to type &lt;strong&gt;manually&lt;/strong&gt; on your keyboard.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Go to the bottom of the file:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[ shift + g ]] or simply [[ G ]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;enter insert mode:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[ i ]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Paste this to the end of the file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mister.slave    ALL=(ALL) NOPASSWD:    ALL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Exit text editor and save contents:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[ :wq ]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If all went well you should be able to run sudo commands without password:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo whoami
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expected output should be &lt;code&gt;root&lt;/code&gt;. So if console printed &lt;code&gt;root&lt;/code&gt; and did not ask you for password congrats!
You can now run all sudo commands without a having to enter your users password.&lt;/p&gt;
&lt;p&gt;Test SSH connection from MASTER to SLAVE:&lt;/p&gt;
&lt;p&gt;connect to our MASTER machine again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh root@192.168.0.105 -p 22222
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then let's issue a REBOOT command to our SLAVE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it b7dfc2f4d0c4 /bin/bash
ssh -i /config/ssh/id_rsa -o StrictHostKeyChecking=no mister.slave@192.168.0.111 'sudo reboot'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If all went well you congrats again you rebooted your &lt;code&gt;mister.slave&lt;/code&gt; from Homeassistant manually!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-i /config/ssh/id_rsa&lt;/code&gt;: Defines in which directory our private SSH key can be found.
&lt;code&gt;-o StrictHostKeyChecking=no&lt;/code&gt;: Says to your SSH client to not prompt you with warning messages or yes/no questions when host &lt;a href="https://superuser.com/questions/125324/how-can-i-avoid-sshs-host-verification-for-known-hosts" title="No SSH prompts"&gt;has changed&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Keep in mind that &lt;code&gt;b7dfc2f4d0c4&lt;/code&gt; is a unique ID of my docker container yours will definitely vary!
if you are confused refer to steps we did in the beginning &lt;a href="#set-up-master"&gt;Set Up MASTER&lt;/a&gt; chapter.
When your SLAVE has rebooted you can continue to &lt;a href="#add-homeassistant-components"&gt;Add Homeassistant Components.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="add-homeassistant-components"&gt;Add Homeassistant Components&lt;/h2&gt;&lt;p&gt;Add these lines to your &lt;code&gt;configuration.yaml&lt;/code&gt; file and then restart Hass.io&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;command_line&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;switches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;test_ssh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;command_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ssh&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-i&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;/config/ssh/id_rsa&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-o&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;StrictHostKeyChecking=no&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;mister.slave@192.168.0.111&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sudo&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;reboot&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;friendly_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Magic Test Switch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now go to your Homeassistant dashboard and press your newly created button.&lt;/p&gt;
&lt;video src="button-in-action.webm"  autoplay loop muted&gt;&lt;/video&gt;&lt;h2 id="conclusions"&gt;Conclusions&lt;/h2&gt;&lt;p&gt;If you followed this tutorial thoroughly you should be good to seed to start for remote control via SSH. If you are
a beginner this guide is a hard and if you managed to reboot something from Homeassistant you should pat your self
on the back.&lt;/p&gt;
&lt;p&gt;Personally, I used this method for turning on effects on my Hyperion daemon. Also, I am planning to make shutdown and reboot buttons
on other server I have at home. One thing to mention though is that you will not have any console output when you call
a remote command using &lt;code&gt;command_line&lt;/code&gt; component, so monitoring things on a remote machine is not possible. You can check out my
Hass.io config file for further &lt;a href="https://github.com/dovydasgulbinas/hass-conf" title="My Homeassistant configuration"&gt;inspiration here&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>Adding more features to Hyperion in Homeassistant</title><link href="https://dovydas.xyz/blog/adding-more-features-to-hyperion-in-homeassistant/" rel="alternate"></link><updated>2017-07-23T00:00:00Z</updated><author><name></name></author><id>urn:uuid:73e0e4f0-528d-3c7e-9791-2fb1876e8702</id><content type="html">&lt;video src="hyperion-hass.webm"  autoplay loop muted&gt;&lt;/video&gt;&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;&lt;p&gt;After playing around with Hyperion I really liked it, I liked it so much that I decided to implement it in my smart-home setup.  I currently use Hyperion for Kodi, but I wanted a way to control it with my &lt;code&gt;Homeassistant&lt;/code&gt;, because I could automate a lot of workflows e.g. automatically turn on the backlight in evenings. My Setup uses two Raspberry Pi devices: First for &lt;code&gt;Kodi + Hyperion&lt;/code&gt; and second just for &lt;code&gt;Homeassistant&lt;/code&gt;. Okay lets begin.&lt;/p&gt;
&lt;p&gt;First open up your terminal and ssh to a machine with has Hyperion service enabled.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh kodi@192.168.1.99
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test if Hyperion commands are working:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hyperion-remote -e "Knight rider"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you got your lights running are ok to go!&lt;/p&gt;
&lt;p&gt;NOTE: In my case Homeassistant and Hyperion are on a different machine therefore I needed to set up a password-less ssh connection from my Homeassistant RPi → Kodi RPi*&lt;/p&gt;
&lt;p&gt;Now login to your second machine running &lt;code&gt;Homeassistant&lt;/code&gt; service.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;pi@192.168.1.100
sudo&lt;span class="w"&gt; &lt;/span&gt;su&lt;span class="w"&gt; &lt;/span&gt;homeassistant
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test the &lt;code&gt;Hyperion&lt;/code&gt; again but now in a remote configuration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; You are entering SSH inception, because you are connecting via SSH to Linux machine while already connected to another machine via SSH!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh kodi@192.168.1.99 'hyperion-remote -e "Knight rider"'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It was mentioned previously that this step just ran an SSH command in a different machine entirely via the power of SSH.  If your setup is all in one meaning &lt;code&gt;Hyperion&lt;/code&gt; and &lt;code&gt;Homeassistant&lt;/code&gt; are running on the same machine then the command would simply be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hyperion-remote -e "Knight rider"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit &lt;code&gt;Homeassistant&lt;/code&gt; configuration files:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;📔 configuration.yaml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;!include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;scripts.yaml&lt;/span&gt;

&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;!include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;groups.yaml&lt;/span&gt;

&lt;span class="nt"&gt;input_select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;hyperion_effects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Hyperion Effects&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;!include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;hyperion_effect_list.yaml&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Rainbow swirl&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mdi:white-balance-iridescent&lt;/span&gt;

&lt;span class="nt"&gt;shell_command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;run_hyperion_effect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ssh&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;kodi@192.168.1.99&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;\&amp;quot;hyperion-remote&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-e&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;{{states.input_select.hyperion_effects.state}}&amp;#39;\&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;📔 hyperion_effect_list.yaml (create this file in hass root directory)&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Rainbow mood&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Rainbow swirl fast&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Rainbow swirl&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Red mood blobs&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Warm mood blobs&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Blue mood blobs&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Full color mood blobs&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Cold mood blobs&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Green mood blobs&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Knight rider&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Police Lights Single&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Police Lights Solid&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Rainbow mood&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Rainbow swirl fast&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Rainbow swirl&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Sparks Color&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Sparks&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Strobe blue&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Strobe Raspbmc&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Strobe white&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Color traces&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- X-Mas&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Cinema brighten lights&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- Cinema dim lights&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- UDP multicast listener&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;- UDP listener&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;📔 scripts.yaml&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;hyperion_run&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run Hyperion Effect&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run selected effect&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;shell_command.run_hyperion_effect&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;📔 groups.yaml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# (Optional example to group all items)&lt;/span&gt;

&lt;span class="nt"&gt;hyperion_group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Hyperion Control&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;input_select.hyperion_effects&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;script.hyperion_run&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;switch.hyperion_service&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;This guide is a more or less a workaround for running Hyperion effects. I saw other people doing similar things to solve this problem, but it involved shell script for every Hyperion effect. This was due to the fact that &lt;code&gt;shell_command&lt;/code&gt; functionality was introduced relatively recently to &lt;code&gt;Homeassistant&lt;/code&gt;. I could try extending the feature set and add brightness control but for now it suits my needs. Furthermore, I could add automation to enable Hyperion only in evenings and I actually have done that. For more inspiration you can check out my  &lt;code&gt;Homeassistant&lt;/code&gt; config by visiting this &lt;a href="https://github.com/dovydasgulbinas/Home-AssistantConfig"&gt;GitHub repository.&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>What is Game State Integration on CS:GO?</title><link href="https://dovydas.xyz/blog/what-is-game-state-integration-on-csgo/" rel="alternate"></link><updated>2016-11-29T00:00:00Z</updated><author><name>D.G.</name></author><id>urn:uuid:54dd5b28-a79a-3a2e-baa9-6fb8741df5e2</id><content type="html">&lt;p&gt;A controversial CS:GO &lt;a href="https://blog.counter-strike.net/index.php/2015/12/13325/"&gt;winter update&lt;/a&gt; (12/17/2015) had the community raging about ridiculous changes to weapon mechanics, as well as the notorious OP R8 revolver.
Due to high dissatisfaction and many other changes, community really ignored the good and interesting things devs at 'Valve' had given us
One of those 'good' things like &lt;a href="https://developer.valvesoftware.com/wiki/Counter-Strike:_Global_Offensive_Game_State_Integration"&gt;Game State Integration.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="what-is-game-state-integration-gsi"&gt;What is Game State Integration (GSI) ?&lt;/h2&gt;&lt;p&gt;Game state integration is a sexy new way to link up &lt;em&gt;events&lt;/em&gt; that are happening in the gave with any computer or any device that handles basic RESTful messages.
 You may ask what are events exactly currently these events include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;information about spectated player (name, steam ID, clan, etc.)&lt;/li&gt;
&lt;li&gt;Can give you information about the round current round state (whether the game is in freeze time mode, pause, or that the round is simply running)&lt;/li&gt;
&lt;li&gt;You can even get info about when the bomb has been planted&lt;/li&gt;
&lt;li&gt;You can get info on which team had won the round&lt;/li&gt;
&lt;li&gt;Receive info on every time you kill an enemy&lt;/li&gt;
&lt;li&gt;Get notified every time a bullet is fired&lt;/li&gt;
&lt;li&gt;Know the score and the map of the game&lt;/li&gt;
&lt;li&gt;and many more...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-is-it-useful"&gt;Why is it useful?&lt;/h2&gt;&lt;p&gt;Because it is ultra easy to set up and can enable you to control virtually anything PC or some crazy piece of hardware.
Original post of CS:GO devs told that:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;For example, game state integration was used at the CS:GO Major Championship at DreamHack Cluj-Napoca to present special stage effects (e.g., lighting and pyrotechnics) during a match.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="demonstrations"&gt;Demonstrations&lt;/h2&gt;&lt;p&gt;Up to this date various people including me have created many interesting things using GSI. See videos down below:&lt;/p&gt;
&lt;h3 id="cs-go-hud-in-a-browser-window"&gt;CS:GO HUD in a browser window&lt;/h3&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/FM1-iapbEtc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Probably the most sophisticated of all demos given below.
This is a rich extension to your CS:GO game. Technology used here is node.js and JavaScript.
This video really showcased the functionality GSI has. I strongly encourage you to try out this one on your own computer.
More info on how to do it can be found on GitHub &lt;a href="https://github.com/Double0negative/CSGO-HUD&amp;quot;"&gt;Phillips hue lights controlled by a C4 timer&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/QBdI54MHB-k" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;This project is by far the least sophisticated but really has the wow factor.
For this video Phillips hue light were used in combination with Python and Hue Bridge IP more info on this project can be found also on &lt;a href="https://github.com/doobix/csgo-c4-hue"&gt;GitHub.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="my-project-physical-7-segment-hud"&gt;My project physical 7-segment HUD&lt;/h3&gt;&lt;p&gt;This is what I made. I choose Python for my project because I recently
started learning it and thought it was a good practice. All the
functionality is demonstrated in the video.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/6le5cuakBh4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id="closing-remarks"&gt;Closing remarks&lt;/h2&gt;&lt;p&gt;By now I hope you really got a grasp on what GSI has to offer. If you are excited about it and want to make something similar feel free to contact me. By the time I'm writing this post someone has already written a &lt;em&gt;C#&lt;/em&gt; library specifically designed to handle GSI events.
For my future blog posts I'll try to cover actually how GSI works. And I will also give you my experience and what I learned during this project until now you can &lt;a href="https://developer.valvesoftware.com/wiki/Counter-Strike:_Global_Offensive_Game_State_Integration"&gt;read more about GSI&lt;/a&gt;
Until then make something epic and share it with the world.&lt;/p&gt;
</content></entry></feed>